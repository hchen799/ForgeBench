// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_75_1_VITIS_LOOP_76_2_VITIS_LOOP_77_3 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_mem2_AWVALID,
        m_axi_mem2_AWREADY,
        m_axi_mem2_AWADDR,
        m_axi_mem2_AWID,
        m_axi_mem2_AWLEN,
        m_axi_mem2_AWSIZE,
        m_axi_mem2_AWBURST,
        m_axi_mem2_AWLOCK,
        m_axi_mem2_AWCACHE,
        m_axi_mem2_AWPROT,
        m_axi_mem2_AWQOS,
        m_axi_mem2_AWREGION,
        m_axi_mem2_AWUSER,
        m_axi_mem2_WVALID,
        m_axi_mem2_WREADY,
        m_axi_mem2_WDATA,
        m_axi_mem2_WSTRB,
        m_axi_mem2_WLAST,
        m_axi_mem2_WID,
        m_axi_mem2_WUSER,
        m_axi_mem2_ARVALID,
        m_axi_mem2_ARREADY,
        m_axi_mem2_ARADDR,
        m_axi_mem2_ARID,
        m_axi_mem2_ARLEN,
        m_axi_mem2_ARSIZE,
        m_axi_mem2_ARBURST,
        m_axi_mem2_ARLOCK,
        m_axi_mem2_ARCACHE,
        m_axi_mem2_ARPROT,
        m_axi_mem2_ARQOS,
        m_axi_mem2_ARREGION,
        m_axi_mem2_ARUSER,
        m_axi_mem2_RVALID,
        m_axi_mem2_RREADY,
        m_axi_mem2_RDATA,
        m_axi_mem2_RLAST,
        m_axi_mem2_RID,
        m_axi_mem2_RFIFONUM,
        m_axi_mem2_RUSER,
        m_axi_mem2_RRESP,
        m_axi_mem2_BVALID,
        m_axi_mem2_BREADY,
        m_axi_mem2_BRESP,
        m_axi_mem2_BID,
        m_axi_mem2_BUSER,
        m_axi_mem1_AWVALID,
        m_axi_mem1_AWREADY,
        m_axi_mem1_AWADDR,
        m_axi_mem1_AWID,
        m_axi_mem1_AWLEN,
        m_axi_mem1_AWSIZE,
        m_axi_mem1_AWBURST,
        m_axi_mem1_AWLOCK,
        m_axi_mem1_AWCACHE,
        m_axi_mem1_AWPROT,
        m_axi_mem1_AWQOS,
        m_axi_mem1_AWREGION,
        m_axi_mem1_AWUSER,
        m_axi_mem1_WVALID,
        m_axi_mem1_WREADY,
        m_axi_mem1_WDATA,
        m_axi_mem1_WSTRB,
        m_axi_mem1_WLAST,
        m_axi_mem1_WID,
        m_axi_mem1_WUSER,
        m_axi_mem1_ARVALID,
        m_axi_mem1_ARREADY,
        m_axi_mem1_ARADDR,
        m_axi_mem1_ARID,
        m_axi_mem1_ARLEN,
        m_axi_mem1_ARSIZE,
        m_axi_mem1_ARBURST,
        m_axi_mem1_ARLOCK,
        m_axi_mem1_ARCACHE,
        m_axi_mem1_ARPROT,
        m_axi_mem1_ARQOS,
        m_axi_mem1_ARREGION,
        m_axi_mem1_ARUSER,
        m_axi_mem1_RVALID,
        m_axi_mem1_RREADY,
        m_axi_mem1_RDATA,
        m_axi_mem1_RLAST,
        m_axi_mem1_RID,
        m_axi_mem1_RFIFONUM,
        m_axi_mem1_RUSER,
        m_axi_mem1_RRESP,
        m_axi_mem1_BVALID,
        m_axi_mem1_BREADY,
        m_axi_mem1_BRESP,
        m_axi_mem1_BID,
        m_axi_mem1_BUSER,
        out_w,
        mul_ln45_1,
        out_h,
        zext_ln75_1,
        mul_ln45,
        output_r,
        cmp764,
        bias
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_mem2_AWVALID;
input   m_axi_mem2_AWREADY;
output  [63:0] m_axi_mem2_AWADDR;
output  [0:0] m_axi_mem2_AWID;
output  [31:0] m_axi_mem2_AWLEN;
output  [2:0] m_axi_mem2_AWSIZE;
output  [1:0] m_axi_mem2_AWBURST;
output  [1:0] m_axi_mem2_AWLOCK;
output  [3:0] m_axi_mem2_AWCACHE;
output  [2:0] m_axi_mem2_AWPROT;
output  [3:0] m_axi_mem2_AWQOS;
output  [3:0] m_axi_mem2_AWREGION;
output  [0:0] m_axi_mem2_AWUSER;
output   m_axi_mem2_WVALID;
input   m_axi_mem2_WREADY;
output  [31:0] m_axi_mem2_WDATA;
output  [3:0] m_axi_mem2_WSTRB;
output   m_axi_mem2_WLAST;
output  [0:0] m_axi_mem2_WID;
output  [0:0] m_axi_mem2_WUSER;
output   m_axi_mem2_ARVALID;
input   m_axi_mem2_ARREADY;
output  [63:0] m_axi_mem2_ARADDR;
output  [0:0] m_axi_mem2_ARID;
output  [31:0] m_axi_mem2_ARLEN;
output  [2:0] m_axi_mem2_ARSIZE;
output  [1:0] m_axi_mem2_ARBURST;
output  [1:0] m_axi_mem2_ARLOCK;
output  [3:0] m_axi_mem2_ARCACHE;
output  [2:0] m_axi_mem2_ARPROT;
output  [3:0] m_axi_mem2_ARQOS;
output  [3:0] m_axi_mem2_ARREGION;
output  [0:0] m_axi_mem2_ARUSER;
input   m_axi_mem2_RVALID;
output   m_axi_mem2_RREADY;
input  [31:0] m_axi_mem2_RDATA;
input   m_axi_mem2_RLAST;
input  [0:0] m_axi_mem2_RID;
input  [8:0] m_axi_mem2_RFIFONUM;
input  [0:0] m_axi_mem2_RUSER;
input  [1:0] m_axi_mem2_RRESP;
input   m_axi_mem2_BVALID;
output   m_axi_mem2_BREADY;
input  [1:0] m_axi_mem2_BRESP;
input  [0:0] m_axi_mem2_BID;
input  [0:0] m_axi_mem2_BUSER;
output   m_axi_mem1_AWVALID;
input   m_axi_mem1_AWREADY;
output  [63:0] m_axi_mem1_AWADDR;
output  [0:0] m_axi_mem1_AWID;
output  [31:0] m_axi_mem1_AWLEN;
output  [2:0] m_axi_mem1_AWSIZE;
output  [1:0] m_axi_mem1_AWBURST;
output  [1:0] m_axi_mem1_AWLOCK;
output  [3:0] m_axi_mem1_AWCACHE;
output  [2:0] m_axi_mem1_AWPROT;
output  [3:0] m_axi_mem1_AWQOS;
output  [3:0] m_axi_mem1_AWREGION;
output  [0:0] m_axi_mem1_AWUSER;
output   m_axi_mem1_WVALID;
input   m_axi_mem1_WREADY;
output  [31:0] m_axi_mem1_WDATA;
output  [3:0] m_axi_mem1_WSTRB;
output   m_axi_mem1_WLAST;
output  [0:0] m_axi_mem1_WID;
output  [0:0] m_axi_mem1_WUSER;
output   m_axi_mem1_ARVALID;
input   m_axi_mem1_ARREADY;
output  [63:0] m_axi_mem1_ARADDR;
output  [0:0] m_axi_mem1_ARID;
output  [31:0] m_axi_mem1_ARLEN;
output  [2:0] m_axi_mem1_ARSIZE;
output  [1:0] m_axi_mem1_ARBURST;
output  [1:0] m_axi_mem1_ARLOCK;
output  [3:0] m_axi_mem1_ARCACHE;
output  [2:0] m_axi_mem1_ARPROT;
output  [3:0] m_axi_mem1_ARQOS;
output  [3:0] m_axi_mem1_ARREGION;
output  [0:0] m_axi_mem1_ARUSER;
input   m_axi_mem1_RVALID;
output   m_axi_mem1_RREADY;
input  [31:0] m_axi_mem1_RDATA;
input   m_axi_mem1_RLAST;
input  [0:0] m_axi_mem1_RID;
input  [8:0] m_axi_mem1_RFIFONUM;
input  [0:0] m_axi_mem1_RUSER;
input  [1:0] m_axi_mem1_RRESP;
input   m_axi_mem1_BVALID;
output   m_axi_mem1_BREADY;
input  [1:0] m_axi_mem1_BRESP;
input  [0:0] m_axi_mem1_BID;
input  [0:0] m_axi_mem1_BUSER;
input  [31:0] out_w;
input  [95:0] mul_ln45_1;
input  [31:0] out_h;
input  [62:0] zext_ln75_1;
input  [63:0] mul_ln45;
input  [63:0] output_r;
input  [0:0] cmp764;
input  [63:0] bias;

reg ap_idle;
reg m_axi_mem2_AWVALID;
reg m_axi_mem2_WVALID;
reg m_axi_mem2_BREADY;
reg m_axi_mem1_ARVALID;
reg m_axi_mem1_RREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_idle_pp0;
reg   [0:0] or_ln76_reg_636;
reg   [0:0] select_ln76_reg_640;
reg    ap_predicate_op103_writereq_state3;
reg    ap_block_state3_io;
reg   [0:0] or_ln76_reg_636_pp0_iter9_reg;
reg    ap_block_state11_pp0_stage0_iter10;
reg   [0:0] icmp_ln77_1_reg_650;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter15_reg;
reg   [0:0] icmp_ln76_1_reg_654;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter15_reg;
reg    ap_predicate_op124_writeresp_state17;
reg    ap_block_state17_pp0_stage0_iter16;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln75_fu_262_p2;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    mem2_blk_n_B;
wire    ap_block_pp0_stage0;
reg    mem2_blk_n_W;
reg    mem2_blk_n_AW;
reg    mem1_blk_n_AR;
reg    mem1_blk_n_R;
reg   [0:0] first_iter_0_reg_203;
reg    ap_block_pp0_stage0_11001;
wire   [63:0] zext_ln75_1_cast_fu_215_p1;
reg   [63:0] zext_ln75_1_cast_reg_622;
reg   [0:0] icmp_ln75_reg_627;
reg   [61:0] sext_ln76_mid2_v_reg_631;
wire   [0:0] or_ln76_fu_370_p2;
reg   [0:0] or_ln76_reg_636_pp0_iter2_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter3_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter4_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter5_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter6_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter7_reg;
reg   [0:0] or_ln76_reg_636_pp0_iter8_reg;
wire   [0:0] select_ln76_fu_382_p3;
reg   [63:0] mem1_addr_reg_644;
wire   [0:0] icmp_ln77_1_fu_461_p2;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter2_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter3_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter4_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter5_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter6_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter7_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter8_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter9_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter10_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter11_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter12_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter13_reg;
reg   [0:0] icmp_ln77_1_reg_650_pp0_iter14_reg;
wire   [0:0] icmp_ln76_1_fu_476_p2;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter2_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter3_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter4_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter5_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter6_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter7_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter8_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter9_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter10_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter11_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter12_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter13_reg;
reg   [0:0] icmp_ln76_1_reg_654_pp0_iter14_reg;
reg   [0:0] ap_phi_mux_first_iter_0_phi_fu_207_p4;
wire    ap_loop_init;
wire  signed [63:0] p_cast_cast_fu_425_p1;
wire  signed [63:0] sext_ln75_fu_520_p1;
reg    ap_block_pp0_stage0_01001;
reg   [30:0] ow_fu_100;
wire   [30:0] select_ln77_1_fu_449_p3;
reg   [30:0] oh_fu_104;
wire   [30:0] select_ln76_1_fu_390_p3;
reg   [63:0] indvar_flatten_fu_108;
wire   [63:0] select_ln76_2_fu_487_p3;
reg   [30:0] oc_fu_112;
wire   [30:0] select_ln75_1_fu_304_p3;
reg   [95:0] indvar_flatten33_fu_116;
wire   [95:0] add_ln75_2_fu_267_p2;
reg   [31:0] mem1_load1_fu_120;
wire   [31:0] zext_ln77_fu_253_p1;
wire   [0:0] icmp_ln76_fu_285_p2;
wire   [30:0] add_ln75_fu_279_p2;
wire   [40:0] sext_ln76_mid2_v_v_v_v_v_fu_312_p3;
wire   [63:0] zext_ln75_fu_320_p1;
wire   [63:0] add_ln75_1_fu_324_p2;
wire   [0:0] first_iter_1315_fu_339_p2;
wire   [0:0] icmp_ln77_fu_257_p2;
wire   [30:0] select_ln75_fu_290_p3;
wire   [0:0] select_ln75_2_fu_351_p3;
wire   [0:0] or_ln75_fu_298_p2;
wire   [0:0] xor_ln76_fu_364_p2;
wire   [30:0] add_ln76_fu_358_p2;
wire   [0:0] or_ln75_1_fu_345_p2;
wire   [0:0] first_iter_1_mid1_fu_376_p2;
wire   [32:0] tmp_s_fu_398_p3;
wire   [63:0] p_cast37_fu_406_p1;
wire   [63:0] empty_41_fu_410_p2;
wire   [61:0] p_cast_fu_415_p4;
wire   [30:0] add_ln77_fu_435_p2;
wire   [30:0] select_ln77_fu_441_p3;
wire   [31:0] zext_ln77_1_fu_457_p1;
wire   [30:0] add_ln76_1_fu_466_p2;
wire   [31:0] zext_ln76_fu_472_p1;
wire   [63:0] add_ln76_2_fu_481_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg    ap_loop_exit_ready_pp0_iter6_reg;
reg    ap_loop_exit_ready_pp0_iter7_reg;
reg    ap_loop_exit_ready_pp0_iter8_reg;
reg    ap_loop_exit_ready_pp0_iter9_reg;
reg    ap_loop_exit_ready_pp0_iter10_reg;
reg    ap_loop_exit_ready_pp0_iter11_reg;
reg    ap_loop_exit_ready_pp0_iter12_reg;
reg    ap_loop_exit_ready_pp0_iter13_reg;
reg    ap_loop_exit_ready_pp0_iter14_reg;
reg    ap_loop_exit_ready_pp0_iter15_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ow_fu_100 = 31'd0;
#0 oh_fu_104 = 31'd0;
#0 indvar_flatten_fu_108 = 64'd0;
#0 oc_fu_112 = 31'd0;
#0 indvar_flatten33_fu_116 = 96'd0;
#0 mem1_load1_fu_120 = 32'd0;
#0 ap_done_reg = 1'b0;
end

conv_via_tiling_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_reg_627 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        first_iter_0_reg_203 <= 1'd0;
    end else if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_203 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten33_fu_116 <= 96'd0;
        end else if (((icmp_ln75_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten33_fu_116 <= add_ln75_2_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_108 <= 64'd0;
        end else if (((icmp_ln75_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_108 <= select_ln76_2_fu_487_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            oc_fu_112 <= 31'd0;
        end else if (((icmp_ln75_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            oc_fu_112 <= select_ln75_1_fu_304_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            oh_fu_104 <= 31'd0;
        end else if (((icmp_ln75_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            oh_fu_104 <= select_ln76_1_fu_390_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            ow_fu_100 <= 31'd0;
        end else if (((icmp_ln75_fu_262_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            ow_fu_100 <= select_ln77_1_fu_449_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
        ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
        ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
        ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
        ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
        ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
        ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
        ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
        ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
        ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
        ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
        icmp_ln76_1_reg_654_pp0_iter10_reg <= icmp_ln76_1_reg_654_pp0_iter9_reg;
        icmp_ln76_1_reg_654_pp0_iter11_reg <= icmp_ln76_1_reg_654_pp0_iter10_reg;
        icmp_ln76_1_reg_654_pp0_iter12_reg <= icmp_ln76_1_reg_654_pp0_iter11_reg;
        icmp_ln76_1_reg_654_pp0_iter13_reg <= icmp_ln76_1_reg_654_pp0_iter12_reg;
        icmp_ln76_1_reg_654_pp0_iter14_reg <= icmp_ln76_1_reg_654_pp0_iter13_reg;
        icmp_ln76_1_reg_654_pp0_iter15_reg <= icmp_ln76_1_reg_654_pp0_iter14_reg;
        icmp_ln76_1_reg_654_pp0_iter2_reg <= icmp_ln76_1_reg_654;
        icmp_ln76_1_reg_654_pp0_iter3_reg <= icmp_ln76_1_reg_654_pp0_iter2_reg;
        icmp_ln76_1_reg_654_pp0_iter4_reg <= icmp_ln76_1_reg_654_pp0_iter3_reg;
        icmp_ln76_1_reg_654_pp0_iter5_reg <= icmp_ln76_1_reg_654_pp0_iter4_reg;
        icmp_ln76_1_reg_654_pp0_iter6_reg <= icmp_ln76_1_reg_654_pp0_iter5_reg;
        icmp_ln76_1_reg_654_pp0_iter7_reg <= icmp_ln76_1_reg_654_pp0_iter6_reg;
        icmp_ln76_1_reg_654_pp0_iter8_reg <= icmp_ln76_1_reg_654_pp0_iter7_reg;
        icmp_ln76_1_reg_654_pp0_iter9_reg <= icmp_ln76_1_reg_654_pp0_iter8_reg;
        icmp_ln77_1_reg_650_pp0_iter10_reg <= icmp_ln77_1_reg_650_pp0_iter9_reg;
        icmp_ln77_1_reg_650_pp0_iter11_reg <= icmp_ln77_1_reg_650_pp0_iter10_reg;
        icmp_ln77_1_reg_650_pp0_iter12_reg <= icmp_ln77_1_reg_650_pp0_iter11_reg;
        icmp_ln77_1_reg_650_pp0_iter13_reg <= icmp_ln77_1_reg_650_pp0_iter12_reg;
        icmp_ln77_1_reg_650_pp0_iter14_reg <= icmp_ln77_1_reg_650_pp0_iter13_reg;
        icmp_ln77_1_reg_650_pp0_iter15_reg <= icmp_ln77_1_reg_650_pp0_iter14_reg;
        icmp_ln77_1_reg_650_pp0_iter2_reg <= icmp_ln77_1_reg_650;
        icmp_ln77_1_reg_650_pp0_iter3_reg <= icmp_ln77_1_reg_650_pp0_iter2_reg;
        icmp_ln77_1_reg_650_pp0_iter4_reg <= icmp_ln77_1_reg_650_pp0_iter3_reg;
        icmp_ln77_1_reg_650_pp0_iter5_reg <= icmp_ln77_1_reg_650_pp0_iter4_reg;
        icmp_ln77_1_reg_650_pp0_iter6_reg <= icmp_ln77_1_reg_650_pp0_iter5_reg;
        icmp_ln77_1_reg_650_pp0_iter7_reg <= icmp_ln77_1_reg_650_pp0_iter6_reg;
        icmp_ln77_1_reg_650_pp0_iter8_reg <= icmp_ln77_1_reg_650_pp0_iter7_reg;
        icmp_ln77_1_reg_650_pp0_iter9_reg <= icmp_ln77_1_reg_650_pp0_iter8_reg;
        or_ln76_reg_636_pp0_iter2_reg <= or_ln76_reg_636;
        or_ln76_reg_636_pp0_iter3_reg <= or_ln76_reg_636_pp0_iter2_reg;
        or_ln76_reg_636_pp0_iter4_reg <= or_ln76_reg_636_pp0_iter3_reg;
        or_ln76_reg_636_pp0_iter5_reg <= or_ln76_reg_636_pp0_iter4_reg;
        or_ln76_reg_636_pp0_iter6_reg <= or_ln76_reg_636_pp0_iter5_reg;
        or_ln76_reg_636_pp0_iter7_reg <= or_ln76_reg_636_pp0_iter6_reg;
        or_ln76_reg_636_pp0_iter8_reg <= or_ln76_reg_636_pp0_iter7_reg;
        or_ln76_reg_636_pp0_iter9_reg <= or_ln76_reg_636_pp0_iter8_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
        icmp_ln75_reg_627 <= icmp_ln75_fu_262_p2;
        icmp_ln76_1_reg_654 <= icmp_ln76_1_fu_476_p2;
        icmp_ln77_1_reg_650 <= icmp_ln77_1_fu_461_p2;
        mem1_addr_reg_644 <= p_cast_cast_fu_425_p1;
        or_ln76_reg_636 <= or_ln76_fu_370_p2;
        select_ln76_reg_640 <= select_ln76_fu_382_p3;
        sext_ln76_mid2_v_reg_631 <= {{add_ln75_1_fu_324_p2[63:2]}};
        zext_ln75_1_cast_reg_622[62 : 0] <= zext_ln75_1_cast_fu_215_p1[62 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln76_reg_636_pp0_iter9_reg == 1'd1))) begin
        mem1_load1_fu_120 <= m_axi_mem1_RDATA;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_262_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter15_reg == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_reg_627 == 1'd0) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_phi_mux_first_iter_0_phi_fu_207_p4 = 1'd0;
    end else begin
        ap_phi_mux_first_iter_0_phi_fu_207_p4 = first_iter_0_reg_203;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln76_reg_636 == 1'd1))) begin
        m_axi_mem1_ARVALID = 1'b1;
    end else begin
        m_axi_mem1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (or_ln76_reg_636_pp0_iter9_reg == 1'd1))) begin
        m_axi_mem1_RREADY = 1'b1;
    end else begin
        m_axi_mem1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op103_writereq_state3 == 1'b1))) begin
        m_axi_mem2_AWVALID = 1'b1;
    end else begin
        m_axi_mem2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_predicate_op124_writeresp_state17 == 1'b1))) begin
        m_axi_mem2_BREADY = 1'b1;
    end else begin
        m_axi_mem2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        m_axi_mem2_WVALID = 1'b1;
    end else begin
        m_axi_mem2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln76_reg_636 == 1'd1))) begin
        mem1_blk_n_AR = m_axi_mem1_ARREADY;
    end else begin
        mem1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (or_ln76_reg_636_pp0_iter9_reg == 1'd1))) begin
        mem1_blk_n_R = m_axi_mem1_RVALID;
    end else begin
        mem1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op103_writereq_state3 == 1'b1))) begin
        mem2_blk_n_AW = m_axi_mem2_AWREADY;
    end else begin
        mem2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (ap_predicate_op124_writeresp_state17 == 1'b1))) begin
        mem2_blk_n_B = m_axi_mem2_BVALID;
    end else begin
        mem2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter11 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        mem2_blk_n_W = m_axi_mem2_WREADY;
    end else begin
        mem2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln75_1_fu_324_p2 = (zext_ln75_fu_320_p1 + output_r);

assign add_ln75_2_fu_267_p2 = (indvar_flatten33_fu_116 + 96'd1);

assign add_ln75_fu_279_p2 = (oc_fu_112 + 31'd1);

assign add_ln76_1_fu_466_p2 = (select_ln76_1_fu_390_p3 + 31'd1);

assign add_ln76_2_fu_481_p2 = (indvar_flatten_fu_108 + 64'd1);

assign add_ln76_fu_358_p2 = (select_ln75_fu_290_p3 + 31'd1);

assign add_ln77_fu_435_p2 = (ow_fu_100 + 31'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((m_axi_mem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter16 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter16)) | ((m_axi_mem2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b1)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_block_state3_io)));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((or_ln76_reg_636_pp0_iter9_reg == 1'd1) & (m_axi_mem1_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter16 = ((ap_predicate_op124_writeresp_state17 == 1'b1) & (m_axi_mem2_BVALID == 1'b0));
end

always @ (*) begin
    ap_block_state3_io = (((or_ln76_reg_636 == 1'd1) & (m_axi_mem1_ARREADY == 1'b0)) | ((m_axi_mem2_AWREADY == 1'b0) & (ap_predicate_op103_writereq_state3 == 1'b1)));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

always @ (*) begin
    ap_predicate_op103_writereq_state3 = ((select_ln76_reg_640 == 1'd1) & (or_ln76_reg_636 == 1'd1));
end

always @ (*) begin
    ap_predicate_op124_writeresp_state17 = ((icmp_ln76_1_reg_654_pp0_iter15_reg == 1'd0) & (icmp_ln77_1_reg_650_pp0_iter15_reg == 1'd0));
end

assign ap_ready = ap_ready_sig;

assign empty_41_fu_410_p2 = (p_cast37_fu_406_p1 + bias);

assign first_iter_1315_fu_339_p2 = ((oh_fu_104 == 31'd0) ? 1'b1 : 1'b0);

assign first_iter_1_mid1_fu_376_p2 = ((add_ln76_fu_358_p2 == 31'd0) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_262_p2 = ((indvar_flatten33_fu_116 == mul_ln45_1) ? 1'b1 : 1'b0);

assign icmp_ln76_1_fu_476_p2 = (($signed(zext_ln76_fu_472_p1) < $signed(out_h)) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_285_p2 = ((indvar_flatten_fu_108 == mul_ln45) ? 1'b1 : 1'b0);

assign icmp_ln77_1_fu_461_p2 = (($signed(zext_ln77_1_fu_457_p1) < $signed(out_w)) ? 1'b1 : 1'b0);

assign icmp_ln77_fu_257_p2 = (($signed(zext_ln77_fu_253_p1) < $signed(out_w)) ? 1'b1 : 1'b0);

assign m_axi_mem1_ARADDR = mem1_addr_reg_644;

assign m_axi_mem1_ARBURST = 2'd0;

assign m_axi_mem1_ARCACHE = 4'd0;

assign m_axi_mem1_ARID = 1'd0;

assign m_axi_mem1_ARLEN = 64'd1;

assign m_axi_mem1_ARLOCK = 2'd0;

assign m_axi_mem1_ARPROT = 3'd0;

assign m_axi_mem1_ARQOS = 4'd0;

assign m_axi_mem1_ARREGION = 4'd0;

assign m_axi_mem1_ARSIZE = 3'd0;

assign m_axi_mem1_ARUSER = 1'd0;

assign m_axi_mem1_AWADDR = 64'd0;

assign m_axi_mem1_AWBURST = 2'd0;

assign m_axi_mem1_AWCACHE = 4'd0;

assign m_axi_mem1_AWID = 1'd0;

assign m_axi_mem1_AWLEN = 32'd0;

assign m_axi_mem1_AWLOCK = 2'd0;

assign m_axi_mem1_AWPROT = 3'd0;

assign m_axi_mem1_AWQOS = 4'd0;

assign m_axi_mem1_AWREGION = 4'd0;

assign m_axi_mem1_AWSIZE = 3'd0;

assign m_axi_mem1_AWUSER = 1'd0;

assign m_axi_mem1_AWVALID = 1'b0;

assign m_axi_mem1_BREADY = 1'b0;

assign m_axi_mem1_WDATA = 32'd0;

assign m_axi_mem1_WID = 1'd0;

assign m_axi_mem1_WLAST = 1'b0;

assign m_axi_mem1_WSTRB = 4'd0;

assign m_axi_mem1_WUSER = 1'd0;

assign m_axi_mem1_WVALID = 1'b0;

assign m_axi_mem2_ARADDR = 64'd0;

assign m_axi_mem2_ARBURST = 2'd0;

assign m_axi_mem2_ARCACHE = 4'd0;

assign m_axi_mem2_ARID = 1'd0;

assign m_axi_mem2_ARLEN = 32'd0;

assign m_axi_mem2_ARLOCK = 2'd0;

assign m_axi_mem2_ARPROT = 3'd0;

assign m_axi_mem2_ARQOS = 4'd0;

assign m_axi_mem2_ARREGION = 4'd0;

assign m_axi_mem2_ARSIZE = 3'd0;

assign m_axi_mem2_ARUSER = 1'd0;

assign m_axi_mem2_ARVALID = 1'b0;

assign m_axi_mem2_AWADDR = sext_ln75_fu_520_p1;

assign m_axi_mem2_AWBURST = 2'd0;

assign m_axi_mem2_AWCACHE = 4'd0;

assign m_axi_mem2_AWID = 1'd0;

assign m_axi_mem2_AWLEN = zext_ln75_1_cast_reg_622;

assign m_axi_mem2_AWLOCK = 2'd0;

assign m_axi_mem2_AWPROT = 3'd0;

assign m_axi_mem2_AWQOS = 4'd0;

assign m_axi_mem2_AWREGION = 4'd0;

assign m_axi_mem2_AWSIZE = 3'd0;

assign m_axi_mem2_AWUSER = 1'd0;

assign m_axi_mem2_RREADY = 1'b0;

assign m_axi_mem2_WDATA = mem1_load1_fu_120;

assign m_axi_mem2_WID = 1'd0;

assign m_axi_mem2_WLAST = 1'b0;

assign m_axi_mem2_WSTRB = 4'd15;

assign m_axi_mem2_WUSER = 1'd0;

assign or_ln75_1_fu_345_p2 = (icmp_ln76_fu_285_p2 | first_iter_1315_fu_339_p2);

assign or_ln75_fu_298_p2 = (icmp_ln76_fu_285_p2 | ap_phi_mux_first_iter_0_phi_fu_207_p4);

assign or_ln76_fu_370_p2 = (xor_ln76_fu_364_p2 | or_ln75_fu_298_p2);

assign p_cast37_fu_406_p1 = tmp_s_fu_398_p3;

assign p_cast_cast_fu_425_p1 = $signed(p_cast_fu_415_p4);

assign p_cast_fu_415_p4 = {{empty_41_fu_410_p2[63:2]}};

assign select_ln75_1_fu_304_p3 = ((icmp_ln76_fu_285_p2[0:0] == 1'b1) ? add_ln75_fu_279_p2 : oc_fu_112);

assign select_ln75_2_fu_351_p3 = ((icmp_ln76_fu_285_p2[0:0] == 1'b1) ? cmp764 : icmp_ln77_fu_257_p2);

assign select_ln75_fu_290_p3 = ((icmp_ln76_fu_285_p2[0:0] == 1'b1) ? 31'd0 : oh_fu_104);

assign select_ln76_1_fu_390_p3 = ((select_ln75_2_fu_351_p3[0:0] == 1'b1) ? select_ln75_fu_290_p3 : add_ln76_fu_358_p2);

assign select_ln76_2_fu_487_p3 = ((icmp_ln76_fu_285_p2[0:0] == 1'b1) ? 64'd1 : add_ln76_2_fu_481_p2);

assign select_ln76_fu_382_p3 = ((select_ln75_2_fu_351_p3[0:0] == 1'b1) ? or_ln75_1_fu_345_p2 : first_iter_1_mid1_fu_376_p2);

assign select_ln77_1_fu_449_p3 = ((select_ln75_2_fu_351_p3[0:0] == 1'b1) ? select_ln77_fu_441_p3 : 31'd1);

assign select_ln77_fu_441_p3 = ((icmp_ln76_fu_285_p2[0:0] == 1'b1) ? 31'd1 : add_ln77_fu_435_p2);

assign sext_ln75_fu_520_p1 = $signed(sext_ln76_mid2_v_reg_631);

assign sext_ln76_mid2_v_v_v_v_v_fu_312_p3 = {{select_ln75_1_fu_304_p3}, {10'd0}};

assign tmp_s_fu_398_p3 = {{select_ln75_1_fu_304_p3}, {2'd0}};

assign xor_ln76_fu_364_p2 = (select_ln75_2_fu_351_p3 ^ 1'd1);

assign zext_ln75_1_cast_fu_215_p1 = zext_ln75_1;

assign zext_ln75_fu_320_p1 = sext_ln76_mid2_v_v_v_v_v_fu_312_p3;

assign zext_ln76_fu_472_p1 = add_ln76_1_fu_466_p2;

assign zext_ln77_1_fu_457_p1 = select_ln77_1_fu_449_p3;

assign zext_ln77_fu_253_p1 = ow_fu_100;

always @ (posedge ap_clk) begin
    zext_ln75_1_cast_reg_622[63] <= 1'b0;
end

endmodule //conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_75_1_VITIS_LOOP_76_2_VITIS_LOOP_77_3
