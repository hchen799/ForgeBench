// ==============================================================
// Generated by Vitis HLS v2024.1.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_107_7_VITIS_LOOP_109_8_VITIS_LOOP_111_9 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        localOut_address0,
        localOut_ce0,
        localOut_we0,
        localOut_d0
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] localOut_address0;
output   localOut_ce0;
output   localOut_we0;
output  [31:0] localOut_d0;

reg ap_idle;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln107_fu_114_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] zext_ln113_4_fu_272_p1;
reg   [2:0] block_out_w_i_fu_52;
wire   [2:0] add_ln111_fu_277_p2;
wire    ap_loop_init;
reg   [2:0] ap_sig_allocacmp_block_out_w_i_load;
reg   [2:0] block_out_h_i_fu_56;
wire   [2:0] select_ln109_fu_204_p3;
reg   [2:0] ap_sig_allocacmp_block_out_h_i_load;
reg   [5:0] indvar_flatten40_fu_60;
wire   [5:0] select_ln109_1_fu_289_p3;
reg   [5:0] ap_sig_allocacmp_indvar_flatten40_load;
reg   [6:0] block_out_ch_i_fu_64;
wire   [6:0] select_ln107_1_fu_176_p3;
reg   [6:0] ap_sig_allocacmp_block_out_ch_i_load;
reg   [11:0] indvar_flatten53_fu_68;
wire   [11:0] add_ln107_1_fu_120_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten53_load;
reg    localOut_we0_local;
reg    localOut_ce0_local;
wire   [0:0] icmp_ln109_fu_144_p2;
wire   [0:0] icmp_ln111_fu_164_p2;
wire   [0:0] xor_ln107_fu_158_p2;
wire   [6:0] add_ln107_fu_138_p2;
wire   [2:0] select_ln107_fu_150_p3;
wire   [0:0] and_ln107_fu_170_p2;
wire   [0:0] empty_fu_190_p2;
wire   [2:0] add_ln109_fu_184_p2;
wire   [9:0] p_shl7_fu_216_p3;
wire   [9:0] zext_ln113_fu_212_p1;
wire   [9:0] sub_ln113_fu_224_p2;
wire   [9:0] zext_ln113_1_fu_230_p1;
wire   [9:0] add_ln113_fu_234_p2;
wire   [8:0] trunc_ln113_fu_240_p1;
wire   [11:0] tmp_fu_244_p3;
wire   [11:0] zext_ln113_2_fu_252_p1;
wire   [2:0] block_out_w_i_mid2_fu_196_p3;
wire   [11:0] sub_ln111_fu_256_p2;
wire   [11:0] zext_ln113_3_fu_262_p1;
wire   [11:0] add_ln113_1_fu_266_p2;
wire   [5:0] add_ln109_1_fu_283_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 block_out_w_i_fu_52 = 3'd0;
#0 block_out_h_i_fu_56 = 3'd0;
#0 indvar_flatten40_fu_60 = 6'd0;
#0 block_out_ch_i_fu_64 = 7'd0;
#0 indvar_flatten53_fu_68 = 12'd0;
#0 ap_done_reg = 1'b0;
end

conv_via_tiling_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln107_fu_114_p2 == 1'd0)) begin
            block_out_ch_i_fu_64 <= select_ln107_1_fu_176_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            block_out_ch_i_fu_64 <= 7'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln107_fu_114_p2 == 1'd0)) begin
            block_out_h_i_fu_56 <= select_ln109_fu_204_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            block_out_h_i_fu_56 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln107_fu_114_p2 == 1'd0)) begin
            block_out_w_i_fu_52 <= add_ln111_fu_277_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            block_out_w_i_fu_52 <= 3'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln107_fu_114_p2 == 1'd0)) begin
            indvar_flatten40_fu_60 <= select_ln109_1_fu_289_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten40_fu_60 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((icmp_ln107_fu_114_p2 == 1'd0)) begin
            indvar_flatten53_fu_68 <= add_ln107_1_fu_120_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_68 <= 12'd0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_block_state1_pp0_stage0_iter0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln107_fu_114_p2 == 1'd1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_block_out_ch_i_load = 7'd0;
    end else begin
        ap_sig_allocacmp_block_out_ch_i_load = block_out_ch_i_fu_64;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_block_out_h_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_block_out_h_i_load = block_out_h_i_fu_56;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_block_out_w_i_load = 3'd0;
    end else begin
        ap_sig_allocacmp_block_out_w_i_load = block_out_w_i_fu_52;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten40_load = 6'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten40_load = indvar_flatten40_fu_60;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_indvar_flatten53_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten53_load = indvar_flatten53_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        localOut_ce0_local = 1'b1;
    end else begin
        localOut_ce0_local = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln107_fu_114_p2 == 1'd0) & (1'b0 == ap_block_state1_pp0_stage0_iter0) & (1'b1 == ap_CS_fsm_state1))) begin
        localOut_we0_local = 1'b1;
    end else begin
        localOut_we0_local = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln107_1_fu_120_p2 = (ap_sig_allocacmp_indvar_flatten53_load + 12'd1);

assign add_ln107_fu_138_p2 = (ap_sig_allocacmp_block_out_ch_i_load + 7'd1);

assign add_ln109_1_fu_283_p2 = (ap_sig_allocacmp_indvar_flatten40_load + 6'd1);

assign add_ln109_fu_184_p2 = (select_ln107_fu_150_p3 + 3'd1);

assign add_ln111_fu_277_p2 = (block_out_w_i_mid2_fu_196_p3 + 3'd1);

assign add_ln113_1_fu_266_p2 = (sub_ln111_fu_256_p2 + zext_ln113_3_fu_262_p1);

assign add_ln113_fu_234_p2 = (sub_ln113_fu_224_p2 + zext_ln113_1_fu_230_p1);

assign and_ln107_fu_170_p2 = (xor_ln107_fu_158_p2 & icmp_ln111_fu_164_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start_int == 1'b0);
end

assign ap_done = ap_done_sig;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = ap_ready_sig;

assign block_out_w_i_mid2_fu_196_p3 = ((empty_fu_190_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_block_out_w_i_load);

assign empty_fu_190_p2 = (icmp_ln109_fu_144_p2 | and_ln107_fu_170_p2);

assign icmp_ln107_fu_114_p2 = ((ap_sig_allocacmp_indvar_flatten53_load == 12'd3136) ? 1'b1 : 1'b0);

assign icmp_ln109_fu_144_p2 = ((ap_sig_allocacmp_indvar_flatten40_load == 6'd49) ? 1'b1 : 1'b0);

assign icmp_ln111_fu_164_p2 = ((ap_sig_allocacmp_block_out_w_i_load == 3'd7) ? 1'b1 : 1'b0);

assign localOut_address0 = zext_ln113_4_fu_272_p1;

assign localOut_ce0 = localOut_ce0_local;

assign localOut_d0 = 32'd0;

assign localOut_we0 = localOut_we0_local;

assign p_shl7_fu_216_p3 = {{select_ln107_1_fu_176_p3}, {3'd0}};

assign select_ln107_1_fu_176_p3 = ((icmp_ln109_fu_144_p2[0:0] == 1'b1) ? add_ln107_fu_138_p2 : ap_sig_allocacmp_block_out_ch_i_load);

assign select_ln107_fu_150_p3 = ((icmp_ln109_fu_144_p2[0:0] == 1'b1) ? 3'd0 : ap_sig_allocacmp_block_out_h_i_load);

assign select_ln109_1_fu_289_p3 = ((icmp_ln109_fu_144_p2[0:0] == 1'b1) ? 6'd1 : add_ln109_1_fu_283_p2);

assign select_ln109_fu_204_p3 = ((and_ln107_fu_170_p2[0:0] == 1'b1) ? add_ln109_fu_184_p2 : select_ln107_fu_150_p3);

assign sub_ln111_fu_256_p2 = (tmp_fu_244_p3 - zext_ln113_2_fu_252_p1);

assign sub_ln113_fu_224_p2 = (p_shl7_fu_216_p3 - zext_ln113_fu_212_p1);

assign tmp_fu_244_p3 = {{trunc_ln113_fu_240_p1}, {3'd0}};

assign trunc_ln113_fu_240_p1 = add_ln113_fu_234_p2[8:0];

assign xor_ln107_fu_158_p2 = (icmp_ln109_fu_144_p2 ^ 1'd1);

assign zext_ln113_1_fu_230_p1 = select_ln109_fu_204_p3;

assign zext_ln113_2_fu_252_p1 = add_ln113_fu_234_p2;

assign zext_ln113_3_fu_262_p1 = block_out_w_i_mid2_fu_196_p3;

assign zext_ln113_4_fu_272_p1 = add_ln113_1_fu_266_p2;

assign zext_ln113_fu_212_p1 = select_ln107_1_fu_176_p3;

endmodule //conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_107_7_VITIS_LOOP_109_8_VITIS_LOOP_111_9
