-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_192_27_VITIS_LOOP_193_28_VITIS_LOOP_194_29 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem2_AWVALID : OUT STD_LOGIC;
    m_axi_mem2_AWREADY : IN STD_LOGIC;
    m_axi_mem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WVALID : OUT STD_LOGIC;
    m_axi_mem2_WREADY : IN STD_LOGIC;
    m_axi_mem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_WLAST : OUT STD_LOGIC;
    m_axi_mem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARVALID : OUT STD_LOGIC;
    m_axi_mem2_ARREADY : IN STD_LOGIC;
    m_axi_mem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RVALID : IN STD_LOGIC;
    m_axi_mem2_RREADY : OUT STD_LOGIC;
    m_axi_mem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_RLAST : IN STD_LOGIC;
    m_axi_mem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BVALID : IN STD_LOGIC;
    m_axi_mem2_BREADY : OUT STD_LOGIC;
    m_axi_mem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    zext_ln104 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln90_2 : IN STD_LOGIC_VECTOR (30 downto 0);
    sext_ln75 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln91_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    xor_ln91 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln192 : IN STD_LOGIC_VECTOR (95 downto 0);
    localOut_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localOut_ce0 : OUT STD_LOGIC;
    localOut_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln102 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln91_3 : IN STD_LOGIC_VECTOR (63 downto 0);
    tmp_cast_mid1257 : IN STD_LOGIC_VECTOR (30 downto 0);
    select_ln91 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_192_27_VITIS_LOOP_193_28_VITIS_LOOP_194_29 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal first_iter_15_reg_826 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_15_reg_826_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state4_io : BOOLEAN;
    signal icmp_ln194_2_reg_830 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln192_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem2_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem2_blk_n_W : STD_LOGIC;
    signal mem2_blk_n_AW : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal tmp_cast_mid1257_cast_fu_229_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_cast_mid1257_cast_reg_764 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln102_cast_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_cast_reg_769 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln91_2_cast_fu_237_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln91_2_cast_reg_774 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln75_cast_fu_241_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln75_cast_reg_779 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln104_cast_fu_245_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln104_cast_reg_784 : STD_LOGIC_VECTOR (32 downto 0);
    signal r_1_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln192_reg_795 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln193_reg_799 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln192_3_fu_332_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln192_3_reg_806 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln193_fu_340_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln193_reg_811 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln193_fu_346_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln193_reg_816 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln193_2_fu_354_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln193_2_reg_821 : STD_LOGIC_VECTOR (2 downto 0);
    signal first_iter_15_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_2_reg_830_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln193_1_fu_606_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln193_1_reg_834 : STD_LOGIC_VECTOR (61 downto 0);
    signal localOut_load_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter2_stage0 : STD_LOGIC;
    signal zext_ln196_2_fu_665_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln193_fu_675_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal c_fu_102 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln194_fu_368_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal r_fu_106 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten231_fu_110 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln193_3_fu_389_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal oc2_fu_114 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln192_4_fu_530_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten282_fu_118 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln192_1_fu_300_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal localOut_ce0_local : STD_LOGIC;
    signal grp_fu_220_p0 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_cast_fu_449_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_cast_mid1_fu_545_p1 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_220_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_220_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln194_fu_286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln194_1_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln194_fu_290_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln192_fu_311_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln192_1_fu_319_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln194_1_fu_374_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln193_1_fu_383_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal oc2_1_cast18_fu_420_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_424_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_429_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal zext_ln193_1_fu_441_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_444_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_224_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_1_fu_454_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_fu_462_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_fu_437_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln192_fu_473_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal oc2_1_cast18_mid1_fu_479_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid1245_fu_483_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_mid_fu_488_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal select_ln192_2_fu_500_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_mid1_fu_511_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_mid1267_fu_519_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_2_fu_496_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln193_3_fu_537_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_mid1_fu_540_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_mid2_fu_550_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp10_mid1_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln192_fu_507_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_mid1269_fu_524_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_43_fu_467_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_569_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_3_fu_579_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal p_mid1229_fu_563_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln192_5_fu_589_p3 : STD_LOGIC_VECTOR (61 downto 0);
    signal tmp_4_fu_596_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln196_1_fu_617_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_621_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln196_fu_613_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln196_fu_629_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln196_fu_635_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln196_fu_638_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln196_fu_644_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln196_1_fu_650_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln196_1_fu_656_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln196_1_fu_659_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_348 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component conv_via_tiling_mul_31ns_32s_62_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (30 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (61 downto 0) );
    end component;


    component conv_via_tiling_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_31ns_32s_62_1_1_U200 : component conv_via_tiling_mul_31ns_32s_62_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 31,
        din1_WIDTH => 32,
        dout_WIDTH => 62)
    port map (
        din0 => grp_fu_220_p0,
        din1 => grp_fu_220_p1,
        dout => grp_fu_220_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_via_tiling_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter2_stage0)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    c_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_102 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln192_fu_295_p2 = ap_const_lv1_0))) then 
                    c_fu_102 <= add_ln194_fu_368_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten231_fu_110_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten231_fu_110 <= ap_const_lv64_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln192_fu_295_p2 = ap_const_lv1_0))) then 
                    indvar_flatten231_fu_110 <= select_ln193_3_fu_389_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten282_fu_118_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten282_fu_118 <= ap_const_lv96_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln192_fu_295_p2 = ap_const_lv1_0))) then 
                    indvar_flatten282_fu_118 <= add_ln192_1_fu_300_p2;
                end if;
            end if; 
        end if;
    end process;

    oc2_fu_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    oc2_fu_114 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln192_reg_795 = ap_const_lv1_0))) then 
                    oc2_fu_114 <= select_ln192_4_fu_530_p3;
                end if;
            end if; 
        end if;
    end process;

    r_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    r_fu_106 <= ap_const_lv3_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln192_fu_295_p2 = ap_const_lv1_0))) then 
                    r_fu_106 <= select_ln193_2_fu_354_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln193_reg_811 <= add_ln193_fu_340_p2;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                first_iter_15_reg_826 <= first_iter_15_fu_362_p2;
                icmp_ln192_reg_795 <= icmp_ln192_fu_295_p2;
                icmp_ln193_reg_799 <= icmp_ln193_fu_306_p2;
                icmp_ln194_2_reg_830 <= icmp_ln194_2_fu_378_p2;
                r_1_reg_790 <= r_fu_106;
                select_ln192_3_reg_806 <= select_ln192_3_fu_332_p3;
                select_ln193_2_reg_821 <= select_ln193_2_fu_354_p3;
                select_ln193_reg_816 <= select_ln193_fu_346_p3;
                sext_ln75_cast_reg_779 <= sext_ln75_cast_fu_241_p1;
                    tmp_cast_mid1257_cast_reg_764(30 downto 0) <= tmp_cast_mid1257_cast_fu_229_p1(30 downto 0);
                    zext_ln102_cast_reg_769(31 downto 0) <= zext_ln102_cast_fu_233_p1(31 downto 0);
                    zext_ln104_cast_reg_784(31 downto 0) <= zext_ln104_cast_fu_245_p1(31 downto 0);
                    zext_ln91_2_cast_reg_774(31 downto 0) <= zext_ln91_2_cast_fu_237_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                first_iter_15_reg_826_pp0_iter2_reg <= first_iter_15_reg_826;
                icmp_ln194_2_reg_830_pp0_iter2_reg <= icmp_ln194_2_reg_830;
                icmp_ln194_2_reg_830_pp0_iter3_reg <= icmp_ln194_2_reg_830_pp0_iter2_reg;
                icmp_ln194_2_reg_830_pp0_iter4_reg <= icmp_ln194_2_reg_830_pp0_iter3_reg;
                icmp_ln194_2_reg_830_pp0_iter5_reg <= icmp_ln194_2_reg_830_pp0_iter4_reg;
                icmp_ln194_2_reg_830_pp0_iter6_reg <= icmp_ln194_2_reg_830_pp0_iter5_reg;
                icmp_ln194_2_reg_830_pp0_iter7_reg <= icmp_ln194_2_reg_830_pp0_iter6_reg;
                icmp_ln194_2_reg_830_pp0_iter8_reg <= icmp_ln194_2_reg_830_pp0_iter7_reg;
                localOut_load_reg_844 <= localOut_q0;
                select_ln193_1_reg_834 <= select_ln193_1_fu_606_p3;
            end if;
        end if;
    end process;
    tmp_cast_mid1257_cast_reg_764(61 downto 31) <= "0000000000000000000000000000000";
    zext_ln102_cast_reg_769(63 downto 32) <= "00000000000000000000000000000000";
    zext_ln91_2_cast_reg_774(61 downto 32) <= "000000000000000000000000000000";
    zext_ln104_cast_reg_784(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln192_1_fu_300_p2 <= std_logic_vector(unsigned(indvar_flatten282_fu_118) + unsigned(ap_const_lv96_1));
    add_ln192_fu_473_p2 <= std_logic_vector(unsigned(oc2_fu_114) + unsigned(ap_const_lv31_1));
    add_ln193_1_fu_383_p2 <= std_logic_vector(unsigned(indvar_flatten231_fu_110) + unsigned(ap_const_lv64_1));
    add_ln193_fu_340_p2 <= std_logic_vector(unsigned(select_ln192_fu_311_p3) + unsigned(ap_const_lv3_1));
    add_ln194_fu_368_p2 <= std_logic_vector(unsigned(select_ln193_fu_346_p3) + unsigned(ap_const_lv3_1));
    add_ln196_1_fu_659_p2 <= std_logic_vector(unsigned(sub_ln196_1_fu_650_p2) + unsigned(zext_ln196_1_fu_656_p1));
    add_ln196_fu_638_p2 <= std_logic_vector(unsigned(sub_ln196_fu_629_p2) + unsigned(zext_ln196_fu_635_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_mem2_WREADY, ap_block_state4_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((m_axi_mem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter9, m_axi_mem2_WREADY, ap_block_state4_io, ap_block_state10_pp0_stage0_iter9)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((m_axi_mem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(m_axi_mem2_BVALID, icmp_ln194_2_reg_830_pp0_iter8_reg)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((icmp_ln194_2_reg_830_pp0_iter8_reg = ap_const_lv1_0) and (m_axi_mem2_BVALID = ap_const_logic_0));
    end process;


    ap_block_state4_io_assign_proc : process(m_axi_mem2_AWREADY, first_iter_15_reg_826_pp0_iter2_reg)
    begin
                ap_block_state4_io <= ((m_axi_mem2_AWREADY = ap_const_logic_0) and (first_iter_15_reg_826_pp0_iter2_reg = ap_const_lv1_1));
    end process;


    ap_condition_348_assign_proc : process(icmp_ln192_reg_795, icmp_ln193_reg_799, select_ln192_3_reg_806)
    begin
                ap_condition_348 <= ((select_ln192_3_reg_806 = ap_const_lv1_1) and (icmp_ln193_reg_799 = ap_const_lv1_1) and (icmp_ln192_reg_795 = ap_const_lv1_0));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln192_fu_295_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln192_fu_295_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter2_stage0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, icmp_ln192_reg_795)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (icmp_ln192_reg_795 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter2_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter8_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter8_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_43_fu_467_p2 <= std_logic_vector(unsigned(tmp10_fu_462_p2) + unsigned(zext_ln193_fu_437_p1));
    empty_fu_424_p2 <= std_logic_vector(unsigned(oc2_1_cast18_fu_420_p1) + unsigned(zext_ln104_cast_reg_784));
    first_iter_15_fu_362_p2 <= "1" when (select_ln193_fu_346_p3 = ap_const_lv3_0) else "0";

    grp_fu_220_p0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, tmp_cast_mid1257_cast_reg_764, icmp_ln192_reg_795, icmp_ln193_reg_799, select_ln192_3_reg_806, tmp_cast_fu_449_p1, tmp_cast_mid1_fu_545_p1, ap_condition_348)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then
            if (((select_ln192_3_reg_806 = ap_const_lv1_0) and (icmp_ln192_reg_795 = ap_const_lv1_0))) then 
                grp_fu_220_p0 <= tmp_cast_mid1_fu_545_p1(31 - 1 downto 0);
            elsif ((ap_const_boolean_1 = ap_condition_348)) then 
                grp_fu_220_p0 <= tmp_cast_mid1257_cast_reg_764(31 - 1 downto 0);
            elsif (((select_ln192_3_reg_806 = ap_const_lv1_1) and (icmp_ln193_reg_799 = ap_const_lv1_0))) then 
                grp_fu_220_p0 <= tmp_cast_fu_449_p1(31 - 1 downto 0);
            else 
                grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_220_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_220_p1 <= sext_ln75_cast_reg_779(32 - 1 downto 0);
    grp_fu_224_p2 <= std_logic_vector(unsigned(grp_fu_220_p2) + unsigned(zext_ln91_2_cast_reg_774));
    icmp_ln192_fu_295_p2 <= "1" when (indvar_flatten282_fu_118 = mul_ln192) else "0";
    icmp_ln193_fu_306_p2 <= "1" when (indvar_flatten231_fu_110 = mul_ln91_3) else "0";
    icmp_ln194_1_fu_327_p2 <= "1" when (signed(select_ln91) < signed(ap_const_lv32_FFFFFFFF)) else "0";
    icmp_ln194_2_fu_378_p2 <= "1" when (signed(zext_ln194_1_fu_374_p1) < signed(xor_ln91)) else "0";
    icmp_ln194_fu_290_p2 <= "1" when (signed(zext_ln194_fu_286_p1) < signed(xor_ln91)) else "0";
    localOut_address0 <= zext_ln196_2_fu_665_p1(12 - 1 downto 0);
    localOut_ce0 <= localOut_ce0_local;

    localOut_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localOut_ce0_local <= ap_const_logic_1;
        else 
            localOut_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_ARADDR <= ap_const_lv64_0;
    m_axi_mem2_ARBURST <= ap_const_lv2_0;
    m_axi_mem2_ARCACHE <= ap_const_lv4_0;
    m_axi_mem2_ARID <= ap_const_lv1_0;
    m_axi_mem2_ARLEN <= ap_const_lv32_0;
    m_axi_mem2_ARLOCK <= ap_const_lv2_0;
    m_axi_mem2_ARPROT <= ap_const_lv3_0;
    m_axi_mem2_ARQOS <= ap_const_lv4_0;
    m_axi_mem2_ARREGION <= ap_const_lv4_0;
    m_axi_mem2_ARSIZE <= ap_const_lv3_0;
    m_axi_mem2_ARUSER <= ap_const_lv1_0;
    m_axi_mem2_ARVALID <= ap_const_logic_0;
    m_axi_mem2_AWADDR <= sext_ln193_fu_675_p1;
    m_axi_mem2_AWBURST <= ap_const_lv2_0;
    m_axi_mem2_AWCACHE <= ap_const_lv4_0;
    m_axi_mem2_AWID <= ap_const_lv1_0;
    m_axi_mem2_AWLEN <= zext_ln102_cast_reg_769(32 - 1 downto 0);
    m_axi_mem2_AWLOCK <= ap_const_lv2_0;
    m_axi_mem2_AWPROT <= ap_const_lv3_0;
    m_axi_mem2_AWQOS <= ap_const_lv4_0;
    m_axi_mem2_AWREGION <= ap_const_lv4_0;
    m_axi_mem2_AWSIZE <= ap_const_lv3_0;
    m_axi_mem2_AWUSER <= ap_const_lv1_0;

    m_axi_mem2_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter3, first_iter_15_reg_826_pp0_iter2_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (first_iter_15_reg_826_pp0_iter2_reg = ap_const_lv1_1))) then 
            m_axi_mem2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem2_BREADY_assign_proc : process(ap_enable_reg_pp0_iter9, icmp_ln194_2_reg_830_pp0_iter8_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln194_2_reg_830_pp0_iter8_reg = ap_const_lv1_0))) then 
            m_axi_mem2_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_RREADY <= ap_const_logic_0;
    m_axi_mem2_WDATA <= localOut_load_reg_844;
    m_axi_mem2_WID <= ap_const_lv1_0;
    m_axi_mem2_WLAST <= ap_const_logic_0;
    m_axi_mem2_WSTRB <= ap_const_lv4_F;
    m_axi_mem2_WUSER <= ap_const_lv1_0;

    m_axi_mem2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_mem2_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem2_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter3, m_axi_mem2_AWREADY, first_iter_15_reg_826_pp0_iter2_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (first_iter_15_reg_826_pp0_iter2_reg = ap_const_lv1_1))) then 
            mem2_blk_n_AW <= m_axi_mem2_AWREADY;
        else 
            mem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter9, m_axi_mem2_BVALID, icmp_ln194_2_reg_830_pp0_iter8_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln194_2_reg_830_pp0_iter8_reg = ap_const_lv1_0))) then 
            mem2_blk_n_B <= m_axi_mem2_BVALID;
        else 
            mem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, m_axi_mem2_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem2_blk_n_W <= m_axi_mem2_WREADY;
        else 
            mem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    oc2_1_cast18_fu_420_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(oc2_fu_114),33));
    oc2_1_cast18_mid1_fu_479_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln192_fu_473_p2),33));
    p_mid1229_fu_563_p2 <= std_logic_vector(unsigned(tmp10_mid1_fu_558_p2) + unsigned(zext_ln192_fu_507_p1));
    p_mid1245_fu_483_p2 <= std_logic_vector(unsigned(oc2_1_cast18_mid1_fu_479_p1) + unsigned(zext_ln104_cast_reg_784));
    p_mid1269_fu_524_p2 <= std_logic_vector(unsigned(tmp10_mid1267_fu_519_p2) + unsigned(zext_ln193_2_fu_496_p1));
    p_mid1_fu_511_p3 <= (grp_fu_224_p2 & ap_const_lv2_0);
    p_mid2_fu_550_p3 <= (grp_fu_224_p2 & ap_const_lv2_0);
    p_mid_fu_488_p3 <= (p_mid1245_fu_483_p2 & ap_const_lv10_0);
    p_shl_fu_621_p3 <= (trunc_ln196_1_fu_617_p1 & ap_const_lv3_0);
    select_ln192_1_fu_319_p3 <= 
        ap_const_lv3_0 when (icmp_ln193_fu_306_p2(0) = '1') else 
        c_fu_102;
    select_ln192_2_fu_500_p3 <= 
        p_mid_fu_488_p3 when (icmp_ln193_reg_799(0) = '1') else 
        tmp_s_fu_429_p3;
    select_ln192_3_fu_332_p3 <= 
        icmp_ln194_1_fu_327_p2 when (icmp_ln193_fu_306_p2(0) = '1') else 
        icmp_ln194_fu_290_p2;
    select_ln192_4_fu_530_p3 <= 
        add_ln192_fu_473_p2 when (icmp_ln193_reg_799(0) = '1') else 
        oc2_fu_114;
    select_ln192_5_fu_589_p3 <= 
        tmp_2_fu_569_p4 when (icmp_ln193_reg_799(0) = '1') else 
        tmp_3_fu_579_p4;
    select_ln192_fu_311_p3 <= 
        ap_const_lv3_0 when (icmp_ln193_fu_306_p2(0) = '1') else 
        r_fu_106;
    select_ln193_1_fu_606_p3 <= 
        select_ln192_5_fu_589_p3 when (select_ln192_3_reg_806(0) = '1') else 
        tmp_4_fu_596_p4;
    select_ln193_2_fu_354_p3 <= 
        select_ln192_fu_311_p3 when (select_ln192_3_fu_332_p3(0) = '1') else 
        add_ln193_fu_340_p2;
    select_ln193_3_fu_389_p3 <= 
        ap_const_lv64_1 when (icmp_ln193_fu_306_p2(0) = '1') else 
        add_ln193_1_fu_383_p2;
    select_ln193_fu_346_p3 <= 
        select_ln192_1_fu_319_p3 when (select_ln192_3_fu_332_p3(0) = '1') else 
        ap_const_lv3_0;
        sext_ln193_fu_675_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln193_1_reg_834),64));

        sext_ln75_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln75),62));

    shl_ln196_fu_644_p2 <= std_logic_vector(shift_left(unsigned(add_ln196_fu_638_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    sub_ln196_1_fu_650_p2 <= std_logic_vector(unsigned(shl_ln196_fu_644_p2) - unsigned(add_ln196_fu_638_p2));
    sub_ln196_fu_629_p2 <= std_logic_vector(unsigned(p_shl_fu_621_p3) - unsigned(trunc_ln196_fu_613_p1));
    tmp10_fu_462_p2 <= std_logic_vector(unsigned(tmp_1_fu_454_p3) + unsigned(output_r));
    tmp10_mid1267_fu_519_p2 <= std_logic_vector(unsigned(p_mid1_fu_511_p3) + unsigned(output_r));
    tmp10_mid1_fu_558_p2 <= std_logic_vector(unsigned(p_mid2_fu_550_p3) + unsigned(output_r));
    tmp_1_fu_454_p3 <= (grp_fu_224_p2 & ap_const_lv2_0);
    tmp_2_fu_569_p4 <= p_mid1269_fu_524_p2(63 downto 2);
    tmp_3_fu_579_p4 <= empty_43_fu_467_p2(63 downto 2);
    tmp_4_fu_596_p4 <= p_mid1229_fu_563_p2(63 downto 2);
    tmp_cast_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_444_p2),62));
    tmp_cast_mid1257_cast_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_cast_mid1257),62));
    tmp_cast_mid1_fu_545_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_mid1_fu_540_p2),62));
    tmp_fu_444_p2 <= std_logic_vector(unsigned(zext_ln193_1_fu_441_p1) + unsigned(mul_ln90_2));
    tmp_mid1_fu_540_p2 <= std_logic_vector(unsigned(zext_ln193_3_fu_537_p1) + unsigned(mul_ln90_2));
    tmp_s_fu_429_p3 <= (empty_fu_424_p2 & ap_const_lv10_0);
    trunc_ln196_1_fu_617_p1 <= select_ln192_4_fu_530_p3(9 - 1 downto 0);
    trunc_ln196_fu_613_p1 <= select_ln192_4_fu_530_p3(12 - 1 downto 0);
    zext_ln102_cast_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln102),64));
    zext_ln104_cast_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln104),33));
    zext_ln192_fu_507_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln192_2_fu_500_p3),64));
    zext_ln193_1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_1_reg_790),31));
    zext_ln193_2_fu_496_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_mid_fu_488_p3),64));
    zext_ln193_3_fu_537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln193_reg_811),31));
    zext_ln193_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_429_p3),64));
    zext_ln194_1_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln194_fu_368_p2),32));
    zext_ln194_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(c_fu_102),32));
    zext_ln196_1_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln193_reg_816),12));
    zext_ln196_2_fu_665_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln196_1_fu_659_p2),64));
    zext_ln196_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln193_2_reg_821),12));
    zext_ln91_2_cast_fu_237_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln91_2),62));
end behav;
