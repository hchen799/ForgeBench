-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_119_10_VITIS_LOOP_120_11 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem2_AWVALID : OUT STD_LOGIC;
    m_axi_mem2_AWREADY : IN STD_LOGIC;
    m_axi_mem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WVALID : OUT STD_LOGIC;
    m_axi_mem2_WREADY : IN STD_LOGIC;
    m_axi_mem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_WLAST : OUT STD_LOGIC;
    m_axi_mem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARVALID : OUT STD_LOGIC;
    m_axi_mem2_ARREADY : IN STD_LOGIC;
    m_axi_mem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RVALID : IN STD_LOGIC;
    m_axi_mem2_RREADY : OUT STD_LOGIC;
    m_axi_mem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_RLAST : IN STD_LOGIC;
    m_axi_mem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BVALID : IN STD_LOGIC;
    m_axi_mem2_BREADY : OUT STD_LOGIC;
    m_axi_mem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul83 : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln104 : IN STD_LOGIC_VECTOR (63 downto 0);
    zext_ln104 : IN STD_LOGIC_VECTOR (31 downto 0);
    tileW : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln90 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_w : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln91_3 : IN STD_LOGIC_VECTOR (30 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    localOut_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localOut_ce0 : OUT STD_LOGIC;
    localOut_we0 : OUT STD_LOGIC;
    localOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_119_10_VITIS_LOOP_120_11 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter44 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter45 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter46 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter47 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state47_pp0_stage0_iter46 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln119_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem2_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem2_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln91_3_cast_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln91_3_cast_reg_481 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln104_cast_fu_177_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln104_cast_reg_486 : STD_LOGIC_VECTOR (32 downto 0);
    signal icmp_ln120_fu_206_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter33_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter34_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter35_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln120_reg_491_pp0_iter36_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln119_fu_230_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln124_2_fu_279_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln124_2_reg_506 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln123_2_fu_285_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_2_reg_511 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_3_fu_289_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_3_reg_516 : STD_LOGIC_VECTOR (11 downto 0);
    signal mem2_addr_1_reg_521 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln123_1_fu_411_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter38_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter39_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter40_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter41_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter42_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter43_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter44_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter45_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_1_reg_527_pp0_iter46_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal mem2_addr_1_read_reg_532 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln123_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln124_1_fu_384_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_fu_84 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal i_3_fu_250_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal oc2_fu_88 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln119_1_fu_302_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten63_fu_92 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln119_1_fu_216_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal localOut_we0_local : STD_LOGIC;
    signal bitcast_ln124_fu_421_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal localOut_ce0_local : STD_LOGIC;
    signal mul_ln124_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln120_1_fu_202_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln119_fu_222_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln120_fu_244_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_234_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln124_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln124_1_fu_274_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_239_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln119_fu_296_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal trunc_ln123_1_fu_313_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal p_shl_fu_317_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal trunc_ln123_fu_309_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal oc2_cast16_fu_331_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_fu_335_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_s_fu_340_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal shl_ln2_fu_352_p3 : STD_LOGIC_VECTOR (33 downto 0);
    signal sext_ln124_fu_359_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_4_fu_363_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_fu_348_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln124_3_fu_368_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln2_fu_374_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sub_ln123_fu_325_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln123_fu_394_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln123_fu_399_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal sub_ln123_1_fu_405_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_234_ce : STD_LOGIC;
    signal grp_fu_239_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter16_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter17_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter18_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter19_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter20_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter21_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter22_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter23_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter24_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter25_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter26_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter27_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter28_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter29_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter30_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter31_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter32_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter33_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter34_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter35_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter36_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter37_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter38_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter39_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter40_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter41_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter42_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter43_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter44_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter45_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter46_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_via_tiling_mul_32s_32s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_via_tiling_sdiv_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_via_tiling_srem_32ns_32ns_32_36_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component conv_via_tiling_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mul_32s_32s_32_1_1_U12 : component conv_via_tiling_mul_32s_32s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln124_fu_169_p0,
        din1 => out_w,
        dout => mul_ln124_fu_169_p2);

    sdiv_32ns_32ns_32_36_1_U13 : component conv_via_tiling_sdiv_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln119_fu_230_p1,
        din1 => tileW,
        ce => grp_fu_234_ce,
        dout => grp_fu_234_p2);

    srem_32ns_32ns_32_36_1_U14 : component conv_via_tiling_srem_32ns_32ns_32_36_1
    generic map (
        ID => 1,
        NUM_STAGE => 36,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => zext_ln119_fu_230_p1,
        din1 => tileW,
        ce => grp_fu_239_ce,
        dout => grp_fu_239_p2);

    flow_control_loop_pipe_sequential_init_U : component conv_via_tiling_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter44_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter44 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter44 <= ap_enable_reg_pp0_iter43;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter45_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter45 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter45 <= ap_enable_reg_pp0_iter44;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter46_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter46 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter46 <= ap_enable_reg_pp0_iter45;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter47_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter47 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter47 <= ap_enable_reg_pp0_iter46;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_84 <= ap_const_lv31_0;
                elsif (((icmp_ln119_fu_211_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_84 <= i_3_fu_250_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten63_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten63_fu_92 <= ap_const_lv64_0;
                elsif (((icmp_ln119_fu_211_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten63_fu_92 <= add_ln119_1_fu_216_p2;
                end if;
            end if; 
        end if;
    end process;

    oc2_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    oc2_fu_88 <= ap_const_lv31_0;
                elsif ((ap_enable_reg_pp0_iter37 = ap_const_logic_1)) then 
                    oc2_fu_88 <= select_ln119_1_fu_302_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln123_1_reg_527 <= add_ln123_1_fu_411_p2;
                add_ln123_1_reg_527_pp0_iter38_reg <= add_ln123_1_reg_527;
                add_ln123_1_reg_527_pp0_iter39_reg <= add_ln123_1_reg_527_pp0_iter38_reg;
                add_ln123_1_reg_527_pp0_iter40_reg <= add_ln123_1_reg_527_pp0_iter39_reg;
                add_ln123_1_reg_527_pp0_iter41_reg <= add_ln123_1_reg_527_pp0_iter40_reg;
                add_ln123_1_reg_527_pp0_iter42_reg <= add_ln123_1_reg_527_pp0_iter41_reg;
                add_ln123_1_reg_527_pp0_iter43_reg <= add_ln123_1_reg_527_pp0_iter42_reg;
                add_ln123_1_reg_527_pp0_iter44_reg <= add_ln123_1_reg_527_pp0_iter43_reg;
                add_ln123_1_reg_527_pp0_iter45_reg <= add_ln123_1_reg_527_pp0_iter44_reg;
                add_ln123_1_reg_527_pp0_iter46_reg <= add_ln123_1_reg_527_pp0_iter45_reg;
                add_ln124_2_reg_506 <= add_ln124_2_fu_279_p2;
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter16_reg <= ap_loop_exit_ready_pp0_iter15_reg;
                ap_loop_exit_ready_pp0_iter17_reg <= ap_loop_exit_ready_pp0_iter16_reg;
                ap_loop_exit_ready_pp0_iter18_reg <= ap_loop_exit_ready_pp0_iter17_reg;
                ap_loop_exit_ready_pp0_iter19_reg <= ap_loop_exit_ready_pp0_iter18_reg;
                ap_loop_exit_ready_pp0_iter20_reg <= ap_loop_exit_ready_pp0_iter19_reg;
                ap_loop_exit_ready_pp0_iter21_reg <= ap_loop_exit_ready_pp0_iter20_reg;
                ap_loop_exit_ready_pp0_iter22_reg <= ap_loop_exit_ready_pp0_iter21_reg;
                ap_loop_exit_ready_pp0_iter23_reg <= ap_loop_exit_ready_pp0_iter22_reg;
                ap_loop_exit_ready_pp0_iter24_reg <= ap_loop_exit_ready_pp0_iter23_reg;
                ap_loop_exit_ready_pp0_iter25_reg <= ap_loop_exit_ready_pp0_iter24_reg;
                ap_loop_exit_ready_pp0_iter26_reg <= ap_loop_exit_ready_pp0_iter25_reg;
                ap_loop_exit_ready_pp0_iter27_reg <= ap_loop_exit_ready_pp0_iter26_reg;
                ap_loop_exit_ready_pp0_iter28_reg <= ap_loop_exit_ready_pp0_iter27_reg;
                ap_loop_exit_ready_pp0_iter29_reg <= ap_loop_exit_ready_pp0_iter28_reg;
                ap_loop_exit_ready_pp0_iter30_reg <= ap_loop_exit_ready_pp0_iter29_reg;
                ap_loop_exit_ready_pp0_iter31_reg <= ap_loop_exit_ready_pp0_iter30_reg;
                ap_loop_exit_ready_pp0_iter32_reg <= ap_loop_exit_ready_pp0_iter31_reg;
                ap_loop_exit_ready_pp0_iter33_reg <= ap_loop_exit_ready_pp0_iter32_reg;
                ap_loop_exit_ready_pp0_iter34_reg <= ap_loop_exit_ready_pp0_iter33_reg;
                ap_loop_exit_ready_pp0_iter35_reg <= ap_loop_exit_ready_pp0_iter34_reg;
                ap_loop_exit_ready_pp0_iter36_reg <= ap_loop_exit_ready_pp0_iter35_reg;
                ap_loop_exit_ready_pp0_iter37_reg <= ap_loop_exit_ready_pp0_iter36_reg;
                ap_loop_exit_ready_pp0_iter38_reg <= ap_loop_exit_ready_pp0_iter37_reg;
                ap_loop_exit_ready_pp0_iter39_reg <= ap_loop_exit_ready_pp0_iter38_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter40_reg <= ap_loop_exit_ready_pp0_iter39_reg;
                ap_loop_exit_ready_pp0_iter41_reg <= ap_loop_exit_ready_pp0_iter40_reg;
                ap_loop_exit_ready_pp0_iter42_reg <= ap_loop_exit_ready_pp0_iter41_reg;
                ap_loop_exit_ready_pp0_iter43_reg <= ap_loop_exit_ready_pp0_iter42_reg;
                ap_loop_exit_ready_pp0_iter44_reg <= ap_loop_exit_ready_pp0_iter43_reg;
                ap_loop_exit_ready_pp0_iter45_reg <= ap_loop_exit_ready_pp0_iter44_reg;
                ap_loop_exit_ready_pp0_iter46_reg <= ap_loop_exit_ready_pp0_iter45_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln120_reg_491_pp0_iter10_reg <= icmp_ln120_reg_491_pp0_iter9_reg;
                icmp_ln120_reg_491_pp0_iter11_reg <= icmp_ln120_reg_491_pp0_iter10_reg;
                icmp_ln120_reg_491_pp0_iter12_reg <= icmp_ln120_reg_491_pp0_iter11_reg;
                icmp_ln120_reg_491_pp0_iter13_reg <= icmp_ln120_reg_491_pp0_iter12_reg;
                icmp_ln120_reg_491_pp0_iter14_reg <= icmp_ln120_reg_491_pp0_iter13_reg;
                icmp_ln120_reg_491_pp0_iter15_reg <= icmp_ln120_reg_491_pp0_iter14_reg;
                icmp_ln120_reg_491_pp0_iter16_reg <= icmp_ln120_reg_491_pp0_iter15_reg;
                icmp_ln120_reg_491_pp0_iter17_reg <= icmp_ln120_reg_491_pp0_iter16_reg;
                icmp_ln120_reg_491_pp0_iter18_reg <= icmp_ln120_reg_491_pp0_iter17_reg;
                icmp_ln120_reg_491_pp0_iter19_reg <= icmp_ln120_reg_491_pp0_iter18_reg;
                icmp_ln120_reg_491_pp0_iter20_reg <= icmp_ln120_reg_491_pp0_iter19_reg;
                icmp_ln120_reg_491_pp0_iter21_reg <= icmp_ln120_reg_491_pp0_iter20_reg;
                icmp_ln120_reg_491_pp0_iter22_reg <= icmp_ln120_reg_491_pp0_iter21_reg;
                icmp_ln120_reg_491_pp0_iter23_reg <= icmp_ln120_reg_491_pp0_iter22_reg;
                icmp_ln120_reg_491_pp0_iter24_reg <= icmp_ln120_reg_491_pp0_iter23_reg;
                icmp_ln120_reg_491_pp0_iter25_reg <= icmp_ln120_reg_491_pp0_iter24_reg;
                icmp_ln120_reg_491_pp0_iter26_reg <= icmp_ln120_reg_491_pp0_iter25_reg;
                icmp_ln120_reg_491_pp0_iter27_reg <= icmp_ln120_reg_491_pp0_iter26_reg;
                icmp_ln120_reg_491_pp0_iter28_reg <= icmp_ln120_reg_491_pp0_iter27_reg;
                icmp_ln120_reg_491_pp0_iter29_reg <= icmp_ln120_reg_491_pp0_iter28_reg;
                icmp_ln120_reg_491_pp0_iter2_reg <= icmp_ln120_reg_491;
                icmp_ln120_reg_491_pp0_iter30_reg <= icmp_ln120_reg_491_pp0_iter29_reg;
                icmp_ln120_reg_491_pp0_iter31_reg <= icmp_ln120_reg_491_pp0_iter30_reg;
                icmp_ln120_reg_491_pp0_iter32_reg <= icmp_ln120_reg_491_pp0_iter31_reg;
                icmp_ln120_reg_491_pp0_iter33_reg <= icmp_ln120_reg_491_pp0_iter32_reg;
                icmp_ln120_reg_491_pp0_iter34_reg <= icmp_ln120_reg_491_pp0_iter33_reg;
                icmp_ln120_reg_491_pp0_iter35_reg <= icmp_ln120_reg_491_pp0_iter34_reg;
                icmp_ln120_reg_491_pp0_iter36_reg <= icmp_ln120_reg_491_pp0_iter35_reg;
                icmp_ln120_reg_491_pp0_iter3_reg <= icmp_ln120_reg_491_pp0_iter2_reg;
                icmp_ln120_reg_491_pp0_iter4_reg <= icmp_ln120_reg_491_pp0_iter3_reg;
                icmp_ln120_reg_491_pp0_iter5_reg <= icmp_ln120_reg_491_pp0_iter4_reg;
                icmp_ln120_reg_491_pp0_iter6_reg <= icmp_ln120_reg_491_pp0_iter5_reg;
                icmp_ln120_reg_491_pp0_iter7_reg <= icmp_ln120_reg_491_pp0_iter6_reg;
                icmp_ln120_reg_491_pp0_iter8_reg <= icmp_ln120_reg_491_pp0_iter7_reg;
                icmp_ln120_reg_491_pp0_iter9_reg <= icmp_ln120_reg_491_pp0_iter8_reg;
                mem2_addr_1_read_reg_532 <= m_axi_mem2_RDATA;
                mem2_addr_1_reg_521 <= sext_ln124_1_fu_384_p1;
                trunc_ln123_2_reg_511 <= trunc_ln123_2_fu_285_p1;
                trunc_ln123_3_reg_516 <= trunc_ln123_3_fu_289_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln120_reg_491 <= icmp_ln120_fu_206_p2;
                    zext_ln104_cast_reg_486(31 downto 0) <= zext_ln104_cast_fu_177_p1(31 downto 0);
                    zext_ln91_3_cast_reg_481(30 downto 0) <= zext_ln91_3_cast_fu_173_p1(30 downto 0);
            end if;
        end if;
    end process;
    zext_ln91_3_cast_reg_481(31) <= '0';
    zext_ln104_cast_reg_486(32) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln119_1_fu_216_p2 <= std_logic_vector(unsigned(indvar_flatten63_fu_92) + unsigned(ap_const_lv64_1));
    add_ln119_fu_296_p2 <= std_logic_vector(unsigned(oc2_fu_88) + unsigned(ap_const_lv31_1));
    add_ln120_fu_244_p2 <= std_logic_vector(unsigned(i_fu_84) + unsigned(ap_const_lv31_1));
    add_ln123_1_fu_411_p2 <= std_logic_vector(unsigned(sub_ln123_1_fu_405_p2) + unsigned(trunc_ln123_3_reg_516));
    add_ln123_fu_394_p2 <= std_logic_vector(unsigned(sub_ln123_fu_325_p2) + unsigned(trunc_ln123_2_reg_511));
    add_ln124_1_fu_274_p2 <= std_logic_vector(unsigned(zext_ln91_3_cast_reg_481) + unsigned(mul_ln124_fu_169_p2));
    add_ln124_2_fu_279_p2 <= std_logic_vector(unsigned(add_ln124_1_fu_274_p2) + unsigned(grp_fu_239_p2));
    add_ln124_3_fu_368_p2 <= std_logic_vector(unsigned(add_ln124_4_fu_363_p2) + unsigned(zext_ln120_fu_348_p1));
    add_ln124_4_fu_363_p2 <= std_logic_vector(signed(sext_ln124_fu_359_p1) + signed(output_r));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter46, m_axi_mem2_ARREADY, ap_block_state47_pp0_stage0_iter46)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state47_pp0_stage0_iter46) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((m_axi_mem2_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter46, m_axi_mem2_ARREADY, ap_block_state47_pp0_stage0_iter46)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state47_pp0_stage0_iter46) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1)) or ((m_axi_mem2_ARREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1)));
    end process;


    ap_block_state47_pp0_stage0_iter46_assign_proc : process(m_axi_mem2_RVALID)
    begin
                ap_block_state47_pp0_stage0_iter46 <= (m_axi_mem2_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln119_fu_211_p2)
    begin
        if (((icmp_ln119_fu_211_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter46_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter46_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43, ap_enable_reg_pp0_iter44, ap_enable_reg_pp0_iter45, ap_enable_reg_pp0_iter46, ap_enable_reg_pp0_iter47)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = 
    ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter47 = ap_const_logic_0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_0) and (ap_enable_reg_pp0_iter45 = ap_const_logic_0) and (ap_enable_reg_pp0_iter44 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 
    = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln124_fu_421_p1 <= mem2_addr_1_read_reg_532;
    empty_fu_335_p2 <= std_logic_vector(unsigned(oc2_cast16_fu_331_p1) + unsigned(zext_ln104_cast_reg_486));

    grp_fu_234_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_234_ce <= ap_const_logic_1;
        else 
            grp_fu_234_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_239_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_239_ce <= ap_const_logic_1;
        else 
            grp_fu_239_ce <= ap_const_logic_0;
        end if; 
    end process;

    i_3_fu_250_p3 <= 
        add_ln120_fu_244_p2 when (icmp_ln120_fu_206_p2(0) = '1') else 
        ap_const_lv31_1;
    icmp_ln119_fu_211_p2 <= "1" when (indvar_flatten63_fu_92 = mul_ln104) else "0";
    icmp_ln120_fu_206_p2 <= "1" when (signed(zext_ln120_1_fu_202_p1) < signed(mul83)) else "0";
    localOut_address0 <= zext_ln123_fu_425_p1(12 - 1 downto 0);
    localOut_ce0 <= localOut_ce0_local;

    localOut_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter47, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            localOut_ce0_local <= ap_const_logic_1;
        else 
            localOut_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localOut_d0 <= bitcast_ln124_fu_421_p1;
    localOut_we0 <= localOut_we0_local;

    localOut_we0_local_assign_proc : process(ap_enable_reg_pp0_iter47, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter47 = ap_const_logic_1))) then 
            localOut_we0_local <= ap_const_logic_1;
        else 
            localOut_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_ARADDR <= mem2_addr_1_reg_521;
    m_axi_mem2_ARBURST <= ap_const_lv2_0;
    m_axi_mem2_ARCACHE <= ap_const_lv4_0;
    m_axi_mem2_ARID <= ap_const_lv1_0;
    m_axi_mem2_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_mem2_ARLOCK <= ap_const_lv2_0;
    m_axi_mem2_ARPROT <= ap_const_lv3_0;
    m_axi_mem2_ARQOS <= ap_const_lv4_0;
    m_axi_mem2_ARREGION <= ap_const_lv4_0;
    m_axi_mem2_ARSIZE <= ap_const_lv3_0;
    m_axi_mem2_ARUSER <= ap_const_lv1_0;

    m_axi_mem2_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter38, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            m_axi_mem2_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem2_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_AWADDR <= ap_const_lv64_0;
    m_axi_mem2_AWBURST <= ap_const_lv2_0;
    m_axi_mem2_AWCACHE <= ap_const_lv4_0;
    m_axi_mem2_AWID <= ap_const_lv1_0;
    m_axi_mem2_AWLEN <= ap_const_lv32_0;
    m_axi_mem2_AWLOCK <= ap_const_lv2_0;
    m_axi_mem2_AWPROT <= ap_const_lv3_0;
    m_axi_mem2_AWQOS <= ap_const_lv4_0;
    m_axi_mem2_AWREGION <= ap_const_lv4_0;
    m_axi_mem2_AWSIZE <= ap_const_lv3_0;
    m_axi_mem2_AWUSER <= ap_const_lv1_0;
    m_axi_mem2_AWVALID <= ap_const_logic_0;
    m_axi_mem2_BREADY <= ap_const_logic_0;

    m_axi_mem2_RREADY_assign_proc : process(ap_enable_reg_pp0_iter46, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            m_axi_mem2_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem2_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_WDATA <= ap_const_lv32_0;
    m_axi_mem2_WID <= ap_const_lv1_0;
    m_axi_mem2_WLAST <= ap_const_logic_0;
    m_axi_mem2_WSTRB <= ap_const_lv4_0;
    m_axi_mem2_WUSER <= ap_const_lv1_0;
    m_axi_mem2_WVALID <= ap_const_logic_0;

    mem2_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter38, m_axi_mem2_ARREADY, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_1))) then 
            mem2_blk_n_AR <= m_axi_mem2_ARREADY;
        else 
            mem2_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter46, m_axi_mem2_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter46 = ap_const_logic_1))) then 
            mem2_blk_n_R <= m_axi_mem2_RVALID;
        else 
            mem2_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    mul_ln124_fu_169_p0 <= std_logic_vector(unsigned(grp_fu_234_p2) + unsigned(mul_ln90));
    oc2_cast16_fu_331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln119_1_fu_302_p3),33));
    p_shl_fu_317_p3 <= (trunc_ln123_1_fu_313_p1 & ap_const_lv3_0);
    select_ln119_1_fu_302_p3 <= 
        oc2_fu_88 when (icmp_ln120_reg_491_pp0_iter36_reg(0) = '1') else 
        add_ln119_fu_296_p2;
    select_ln119_fu_222_p3 <= 
        i_fu_84 when (icmp_ln120_fu_206_p2(0) = '1') else 
        ap_const_lv31_0;
        sext_ln124_1_fu_384_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln2_fu_374_p4),64));

        sext_ln124_fu_359_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln2_fu_352_p3),64));

    shl_ln123_fu_399_p2 <= std_logic_vector(shift_left(unsigned(add_ln123_fu_394_p2),to_integer(unsigned('0' & ap_const_lv12_3(12-1 downto 0)))));
    shl_ln2_fu_352_p3 <= (add_ln124_2_reg_506 & ap_const_lv2_0);
    sub_ln123_1_fu_405_p2 <= std_logic_vector(unsigned(shl_ln123_fu_399_p2) - unsigned(add_ln123_fu_394_p2));
    sub_ln123_fu_325_p2 <= std_logic_vector(unsigned(p_shl_fu_317_p3) - unsigned(trunc_ln123_fu_309_p1));
    tmp_s_fu_340_p3 <= (empty_fu_335_p2 & ap_const_lv10_0);
    trunc_ln123_1_fu_313_p1 <= select_ln119_1_fu_302_p3(9 - 1 downto 0);
    trunc_ln123_2_fu_285_p1 <= grp_fu_234_p2(12 - 1 downto 0);
    trunc_ln123_3_fu_289_p1 <= grp_fu_239_p2(12 - 1 downto 0);
    trunc_ln123_fu_309_p1 <= select_ln119_1_fu_302_p3(12 - 1 downto 0);
    trunc_ln2_fu_374_p4 <= add_ln124_3_fu_368_p2(63 downto 2);
    zext_ln104_cast_fu_177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln104),33));
    zext_ln119_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln119_fu_222_p3),32));
    zext_ln120_1_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_fu_84),32));
    zext_ln120_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_340_p3),64));
    zext_ln123_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln123_1_reg_527_pp0_iter46_reg),64));
    zext_ln91_3_cast_fu_173_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln91_3),32));
end behav;
