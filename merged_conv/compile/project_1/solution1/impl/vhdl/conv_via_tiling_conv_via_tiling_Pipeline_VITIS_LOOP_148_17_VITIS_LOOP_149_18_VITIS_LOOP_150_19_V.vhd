-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_148_17_VITIS_LOOP_149_18_VITIS_LOOP_150_19_V is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem1_AWVALID : OUT STD_LOGIC;
    m_axi_mem1_AWREADY : IN STD_LOGIC;
    m_axi_mem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_WVALID : OUT STD_LOGIC;
    m_axi_mem1_WREADY : IN STD_LOGIC;
    m_axi_mem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_WLAST : OUT STD_LOGIC;
    m_axi_mem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_ARVALID : OUT STD_LOGIC;
    m_axi_mem1_ARREADY : IN STD_LOGIC;
    m_axi_mem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RVALID : IN STD_LOGIC;
    m_axi_mem1_RREADY : OUT STD_LOGIC;
    m_axi_mem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_RLAST : IN STD_LOGIC;
    m_axi_mem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_BVALID : IN STD_LOGIC;
    m_axi_mem1_BREADY : OUT STD_LOGIC;
    m_axi_mem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    mul_ln129_1 : IN STD_LOGIC_VECTOR (67 downto 0);
    localW_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_ce0 : OUT STD_LOGIC;
    localW_we0 : OUT STD_LOGIC;
    localW_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_1_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_1_ce0 : OUT STD_LOGIC;
    localW_1_we0 : OUT STD_LOGIC;
    localW_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_2_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_2_ce0 : OUT STD_LOGIC;
    localW_2_we0 : OUT STD_LOGIC;
    localW_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_3_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_3_ce0 : OUT STD_LOGIC;
    localW_3_we0 : OUT STD_LOGIC;
    localW_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_4_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_4_ce0 : OUT STD_LOGIC;
    localW_4_we0 : OUT STD_LOGIC;
    localW_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_5_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_5_ce0 : OUT STD_LOGIC;
    localW_5_we0 : OUT STD_LOGIC;
    localW_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_6_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_6_ce0 : OUT STD_LOGIC;
    localW_6_we0 : OUT STD_LOGIC;
    localW_6_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_7_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_7_ce0 : OUT STD_LOGIC;
    localW_7_we0 : OUT STD_LOGIC;
    localW_7_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    localW_8_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localW_8_ce0 : OUT STD_LOGIC;
    localW_8_we0 : OUT STD_LOGIC;
    localW_8_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    zext_ln148 : IN STD_LOGIC_VECTOR (34 downto 0);
    mul_ln129 : IN STD_LOGIC_VECTOR (35 downto 0);
    zext_ln102 : IN STD_LOGIC_VECTOR (31 downto 0);
    weight : IN STD_LOGIC_VECTOR (63 downto 0);
    p_cast46 : IN STD_LOGIC_VECTOR (37 downto 0) );
end;


architecture behav of conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_148_17_VITIS_LOOP_149_18_VITIS_LOOP_150_19_V is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv36_0 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    constant ap_const_lv68_0 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv68_1 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv36_1 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal first_iter_8_reg_871 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_9_mid2_reg_863 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln149_1_reg_855 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op124_readreq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln148_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem1_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem1_blk_n_AR : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal p_cast46_cast_fu_312_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast46_cast_reg_836 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln102_cast_fu_316_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln102_cast_reg_841 : STD_LOGIC_VECTOR (32 downto 0);
    signal zext_ln148_cast_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln148_cast_reg_846 : STD_LOGIC_VECTOR (63 downto 0);
    signal select_ln149_1_fu_496_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal kc_mid2_fu_560_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859 : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal kc_mid2_reg_859_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal first_iter_9_mid2_fu_574_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln150_fu_582_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter5_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter6_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter7_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter8_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter9_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln150_reg_867_pp0_iter10_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal first_iter_8_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem1_addr_reg_875 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_53_fu_681_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter4_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter5_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter6_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter7_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter8_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter9_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_53_reg_881_pp0_iter10_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal bitcast_ln153_fu_756_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln153_reg_886 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_cast_fu_760_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln149_fu_659_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kc_fu_120 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal add_ln151_fu_687_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal kr_fu_124 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal indvar_flatten113_fu_128 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln150_1_fu_699_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal ic2_fu_132 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln149_2_fu_534_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten129_fu_136 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000000000000000";
    signal select_ln149_3_fu_713_p3 : STD_LOGIC_VECTOR (35 downto 0);
    signal oc2_fu_140 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln148_1_fu_458_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten158_fu_144 : STD_LOGIC_VECTOR (67 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln148_1_fu_373_p2 : STD_LOGIC_VECTOR (67 downto 0);
    signal localW_4_we0_local : STD_LOGIC;
    signal localW_4_ce0_local : STD_LOGIC;
    signal localW_3_we0_local : STD_LOGIC;
    signal localW_3_ce0_local : STD_LOGIC;
    signal localW_5_we0_local : STD_LOGIC;
    signal localW_5_ce0_local : STD_LOGIC;
    signal localW_1_we0_local : STD_LOGIC;
    signal localW_1_ce0_local : STD_LOGIC;
    signal localW_we0_local : STD_LOGIC;
    signal localW_ce0_local : STD_LOGIC;
    signal localW_2_we0_local : STD_LOGIC;
    signal localW_2_ce0_local : STD_LOGIC;
    signal localW_7_we0_local : STD_LOGIC;
    signal localW_7_ce0_local : STD_LOGIC;
    signal localW_6_we0_local : STD_LOGIC;
    signal localW_6_ce0_local : STD_LOGIC;
    signal localW_8_we0_local : STD_LOGIC;
    signal localW_8_ce0_local : STD_LOGIC;
    signal icmp_ln149_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_10394_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_9397_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln148_fu_434_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln148_fu_391_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln148_fu_402_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal and_ln148_1_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln149_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln149_fu_470_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal first_iter_10_mid1_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln148_1_fu_428_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln149_fu_510_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln149_2_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln148_fu_522_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln151_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln149_fu_482_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln149_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_56_fu_548_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_57_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln150_fu_542_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal first_iter_9_mid1_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln149_1_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln148_1_fu_596_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal empty_58_fu_600_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal tmp_fu_605_p3 : STD_LOGIC_VECTOR (45 downto 0);
    signal tmp_46_fu_617_p3 : STD_LOGIC_VECTOR (42 downto 0);
    signal p_shl_fu_613_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_shl17_fu_625_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal empty_59_fu_629_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal p_cast51_fu_635_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp6_fu_639_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_60_fu_644_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln3_fu_649_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln149_fu_466_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_fu_669_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal empty_fu_677_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln150_1_fu_693_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln149_1_fu_707_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_via_tiling_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv_via_tiling_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    ic2_fu_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ic2_fu_132 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    ic2_fu_132 <= select_ln149_2_fu_534_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten113_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten113_fu_128 <= ap_const_lv4_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    indvar_flatten113_fu_128 <= select_ln150_1_fu_699_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten129_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten129_fu_136 <= ap_const_lv36_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    indvar_flatten129_fu_136 <= select_ln149_3_fu_713_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten158_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten158_fu_144 <= ap_const_lv68_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    indvar_flatten158_fu_144 <= add_ln148_1_fu_373_p2;
                end if;
            end if; 
        end if;
    end process;

    kc_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kc_fu_120 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    kc_fu_120 <= add_ln151_fu_687_p2;
                end if;
            end if; 
        end if;
    end process;

    kr_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    kr_fu_124 <= ap_const_lv2_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    kr_fu_124 <= select_ln150_fu_582_p3;
                end if;
            end if; 
        end if;
    end process;

    oc2_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    oc2_fu_140 <= ap_const_lv31_0;
                elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (icmp_ln148_fu_368_p2 = ap_const_lv1_0))) then 
                    oc2_fu_140 <= select_ln148_1_fu_458_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                bitcast_ln153_reg_886 <= bitcast_ln153_fu_756_p1;
                empty_53_reg_881_pp0_iter10_reg <= empty_53_reg_881_pp0_iter9_reg;
                empty_53_reg_881_pp0_iter2_reg <= empty_53_reg_881;
                empty_53_reg_881_pp0_iter3_reg <= empty_53_reg_881_pp0_iter2_reg;
                empty_53_reg_881_pp0_iter4_reg <= empty_53_reg_881_pp0_iter3_reg;
                empty_53_reg_881_pp0_iter5_reg <= empty_53_reg_881_pp0_iter4_reg;
                empty_53_reg_881_pp0_iter6_reg <= empty_53_reg_881_pp0_iter5_reg;
                empty_53_reg_881_pp0_iter7_reg <= empty_53_reg_881_pp0_iter6_reg;
                empty_53_reg_881_pp0_iter8_reg <= empty_53_reg_881_pp0_iter7_reg;
                empty_53_reg_881_pp0_iter9_reg <= empty_53_reg_881_pp0_iter8_reg;
                kc_mid2_reg_859_pp0_iter10_reg <= kc_mid2_reg_859_pp0_iter9_reg;
                kc_mid2_reg_859_pp0_iter2_reg <= kc_mid2_reg_859;
                kc_mid2_reg_859_pp0_iter3_reg <= kc_mid2_reg_859_pp0_iter2_reg;
                kc_mid2_reg_859_pp0_iter4_reg <= kc_mid2_reg_859_pp0_iter3_reg;
                kc_mid2_reg_859_pp0_iter5_reg <= kc_mid2_reg_859_pp0_iter4_reg;
                kc_mid2_reg_859_pp0_iter6_reg <= kc_mid2_reg_859_pp0_iter5_reg;
                kc_mid2_reg_859_pp0_iter7_reg <= kc_mid2_reg_859_pp0_iter6_reg;
                kc_mid2_reg_859_pp0_iter8_reg <= kc_mid2_reg_859_pp0_iter7_reg;
                kc_mid2_reg_859_pp0_iter9_reg <= kc_mid2_reg_859_pp0_iter8_reg;
                select_ln150_reg_867_pp0_iter10_reg <= select_ln150_reg_867_pp0_iter9_reg;
                select_ln150_reg_867_pp0_iter2_reg <= select_ln150_reg_867;
                select_ln150_reg_867_pp0_iter3_reg <= select_ln150_reg_867_pp0_iter2_reg;
                select_ln150_reg_867_pp0_iter4_reg <= select_ln150_reg_867_pp0_iter3_reg;
                select_ln150_reg_867_pp0_iter5_reg <= select_ln150_reg_867_pp0_iter4_reg;
                select_ln150_reg_867_pp0_iter6_reg <= select_ln150_reg_867_pp0_iter5_reg;
                select_ln150_reg_867_pp0_iter7_reg <= select_ln150_reg_867_pp0_iter6_reg;
                select_ln150_reg_867_pp0_iter8_reg <= select_ln150_reg_867_pp0_iter7_reg;
                select_ln150_reg_867_pp0_iter9_reg <= select_ln150_reg_867_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_53_reg_881 <= empty_53_fu_681_p2;
                first_iter_8_reg_871 <= first_iter_8_fu_590_p2;
                first_iter_9_mid2_reg_863 <= first_iter_9_mid2_fu_574_p3;
                kc_mid2_reg_859 <= kc_mid2_fu_560_p3;
                mem1_addr_reg_875 <= sext_ln149_fu_659_p1;
                    p_cast46_cast_reg_836(37 downto 0) <= p_cast46_cast_fu_312_p1(37 downto 0);
                select_ln149_1_reg_855 <= select_ln149_1_fu_496_p3;
                select_ln150_reg_867 <= select_ln150_fu_582_p3;
                    zext_ln102_cast_reg_841(31 downto 0) <= zext_ln102_cast_fu_316_p1(31 downto 0);
                    zext_ln148_cast_reg_846(34 downto 0) <= zext_ln148_cast_fu_320_p1(34 downto 0);
            end if;
        end if;
    end process;
    p_cast46_cast_reg_836(63 downto 38) <= "00000000000000000000000000";
    zext_ln102_cast_reg_841(32) <= '0';
    zext_ln148_cast_reg_846(63 downto 35) <= "00000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln148_1_fu_373_p2 <= std_logic_vector(unsigned(indvar_flatten158_fu_144) + unsigned(ap_const_lv68_1));
    add_ln148_fu_391_p2 <= std_logic_vector(unsigned(oc2_fu_140) + unsigned(ap_const_lv31_1));
    add_ln149_1_fu_707_p2 <= std_logic_vector(unsigned(indvar_flatten129_fu_136) + unsigned(ap_const_lv36_1));
    add_ln149_fu_470_p2 <= std_logic_vector(unsigned(select_ln148_fu_402_p3) + unsigned(ap_const_lv31_1));
    add_ln150_1_fu_693_p2 <= std_logic_vector(unsigned(indvar_flatten113_fu_128) + unsigned(ap_const_lv4_1));
    add_ln150_fu_542_p2 <= std_logic_vector(unsigned(select_ln149_fu_482_p3) + unsigned(ap_const_lv2_1));
    add_ln151_fu_687_p2 <= std_logic_vector(unsigned(kc_mid2_fu_560_p3) + unsigned(ap_const_lv2_1));
    and_ln148_1_fu_452_p2 <= (xor_ln148_fu_434_p2 and icmp_ln150_fu_446_p2);
    and_ln148_fu_522_p2 <= (xor_ln148_fu_434_p2 and or_ln149_2_fu_516_p2);
    and_ln149_fu_528_p2 <= (icmp_ln151_fu_440_p2 and and_ln148_fu_522_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, ap_block_state3_io, ap_block_state11_pp0_stage0_iter10)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, ap_block_state3_io, ap_block_state11_pp0_stage0_iter10)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_mem1_RVALID)
    begin
                ap_block_state11_pp0_stage0_iter10 <= (m_axi_mem1_RVALID = ap_const_logic_0);
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_mem1_ARREADY, ap_predicate_op124_readreq_state3)
    begin
                ap_block_state3_io <= ((m_axi_mem1_ARREADY = ap_const_logic_0) and (ap_predicate_op124_readreq_state3 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln148_fu_368_p2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln148_fu_368_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter10_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter10_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_predicate_op124_readreq_state3_assign_proc : process(first_iter_8_reg_871, first_iter_9_mid2_reg_863, select_ln149_1_reg_855)
    begin
                ap_predicate_op124_readreq_state3 <= ((select_ln149_1_reg_855 = ap_const_lv1_1) and (first_iter_9_mid2_reg_863 = ap_const_lv1_1) and (first_iter_8_reg_871 = ap_const_lv1_1));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    bitcast_ln153_fu_756_p1 <= m_axi_mem1_RDATA;
    empty_53_fu_681_p2 <= std_logic_vector(unsigned(tmp_s_fu_669_p3) + unsigned(empty_fu_677_p1));
    empty_56_fu_548_p2 <= (and_ln149_fu_528_p2 or and_ln148_1_fu_452_p2);
    empty_57_fu_554_p2 <= (icmp_ln149_fu_397_p2 or empty_56_fu_548_p2);
    empty_58_fu_600_p2 <= std_logic_vector(unsigned(zext_ln148_1_fu_596_p1) + unsigned(zext_ln102_cast_reg_841));
    empty_59_fu_629_p2 <= std_logic_vector(unsigned(p_shl_fu_613_p1) + unsigned(p_shl17_fu_625_p1));
    empty_60_fu_644_p2 <= std_logic_vector(unsigned(tmp6_fu_639_p2) + unsigned(p_cast46_cast_reg_836));
    empty_fu_677_p1 <= select_ln149_2_fu_534_p3(12 - 1 downto 0);
    first_iter_10394_fu_410_p2 <= "1" when (ic2_fu_132 = ap_const_lv31_0) else "0";
    first_iter_10_mid1_fu_490_p2 <= "1" when (add_ln149_fu_470_p2 = ap_const_lv31_0) else "0";
    first_iter_8_fu_590_p2 <= "1" when (kc_mid2_fu_560_p3 = ap_const_lv2_0) else "0";
    first_iter_9397_fu_422_p2 <= "1" when (kr_fu_124 = ap_const_lv2_0) else "0";
    first_iter_9_mid1_fu_568_p2 <= "1" when (add_ln150_fu_542_p2 = ap_const_lv2_0) else "0";
    first_iter_9_mid2_fu_574_p3 <= 
        first_iter_9_mid1_fu_568_p2 when (and_ln149_fu_528_p2(0) = '1') else 
        or_ln149_1_fu_504_p2;
    icmp_ln148_fu_368_p2 <= "1" when (indvar_flatten158_fu_144 = mul_ln129_1) else "0";
    icmp_ln149_fu_397_p2 <= "1" when (indvar_flatten129_fu_136 = mul_ln129) else "0";
    icmp_ln150_fu_446_p2 <= "1" when (indvar_flatten113_fu_128 = ap_const_lv4_9) else "0";
    icmp_ln151_fu_440_p2 <= "1" when (kc_fu_120 = ap_const_lv2_3) else "0";
    kc_mid2_fu_560_p3 <= 
        ap_const_lv2_0 when (empty_57_fu_554_p2(0) = '1') else 
        kc_fu_120;
    localW_1_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_1_ce0 <= localW_1_ce0_local;

    localW_1_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_1_ce0_local <= ap_const_logic_1;
        else 
            localW_1_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_1_d0 <= bitcast_ln153_reg_886;
    localW_1_we0 <= localW_1_we0_local;

    localW_1_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_1_we0_local <= ap_const_logic_1;
        else 
            localW_1_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_2_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_2_ce0 <= localW_2_ce0_local;

    localW_2_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_2_ce0_local <= ap_const_logic_1;
        else 
            localW_2_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_2_d0 <= bitcast_ln153_reg_886;
    localW_2_we0 <= localW_2_we0_local;

    localW_2_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if ((not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0)) and not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_2_we0_local <= ap_const_logic_1;
        else 
            localW_2_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_3_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_3_ce0 <= localW_3_ce0_local;

    localW_3_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_3_ce0_local <= ap_const_logic_1;
        else 
            localW_3_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_3_d0 <= bitcast_ln153_reg_886;
    localW_3_we0 <= localW_3_we0_local;

    localW_3_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_3_we0_local <= ap_const_logic_1;
        else 
            localW_3_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_4_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_4_ce0 <= localW_4_ce0_local;

    localW_4_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_4_ce0_local <= ap_const_logic_1;
        else 
            localW_4_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_4_d0 <= bitcast_ln153_reg_886;
    localW_4_we0 <= localW_4_we0_local;

    localW_4_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_4_we0_local <= ap_const_logic_1;
        else 
            localW_4_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_5_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_5_ce0 <= localW_5_ce0_local;

    localW_5_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_5_ce0_local <= ap_const_logic_1;
        else 
            localW_5_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_5_d0 <= bitcast_ln153_reg_886;
    localW_5_we0 <= localW_5_we0_local;

    localW_5_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if ((not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0)) and not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_5_we0_local <= ap_const_logic_1;
        else 
            localW_5_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_6_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_6_ce0 <= localW_6_ce0_local;

    localW_6_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_6_ce0_local <= ap_const_logic_1;
        else 
            localW_6_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_6_d0 <= bitcast_ln153_reg_886;
    localW_6_we0 <= localW_6_we0_local;

    localW_6_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if ((not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0)) and not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_6_we0_local <= ap_const_logic_1;
        else 
            localW_6_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_7_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_7_ce0 <= localW_7_ce0_local;

    localW_7_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_7_ce0_local <= ap_const_logic_1;
        else 
            localW_7_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_7_d0 <= bitcast_ln153_reg_886;
    localW_7_we0 <= localW_7_we0_local;

    localW_7_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if ((not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0)) and not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_7_we0_local <= ap_const_logic_1;
        else 
            localW_7_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_8_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_8_ce0 <= localW_8_ce0_local;

    localW_8_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_8_ce0_local <= ap_const_logic_1;
        else 
            localW_8_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_8_d0 <= bitcast_ln153_reg_886;
    localW_8_we0 <= localW_8_we0_local;

    localW_8_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if ((not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0)) and not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0)) and not((kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_1)) and not((select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_1)) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_8_we0_local <= ap_const_logic_1;
        else 
            localW_8_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_address0 <= p_cast_fu_760_p1(12 - 1 downto 0);
    localW_ce0 <= localW_ce0_local;

    localW_ce0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_ce0_local <= ap_const_logic_1;
        else 
            localW_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localW_d0 <= bitcast_ln153_reg_886;
    localW_we0 <= localW_we0_local;

    localW_we0_local_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001, kc_mid2_reg_859_pp0_iter10_reg, select_ln150_reg_867_pp0_iter10_reg)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (select_ln150_reg_867_pp0_iter10_reg = ap_const_lv2_0) and (kc_mid2_reg_859_pp0_iter10_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            localW_we0_local <= ap_const_logic_1;
        else 
            localW_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem1_ARADDR <= mem1_addr_reg_875;
    m_axi_mem1_ARBURST <= ap_const_lv2_0;
    m_axi_mem1_ARCACHE <= ap_const_lv4_0;
    m_axi_mem1_ARID <= ap_const_lv1_0;
    m_axi_mem1_ARLEN <= zext_ln148_cast_reg_846(32 - 1 downto 0);
    m_axi_mem1_ARLOCK <= ap_const_lv2_0;
    m_axi_mem1_ARPROT <= ap_const_lv3_0;
    m_axi_mem1_ARQOS <= ap_const_lv4_0;
    m_axi_mem1_ARREGION <= ap_const_lv4_0;
    m_axi_mem1_ARSIZE <= ap_const_lv3_0;
    m_axi_mem1_ARUSER <= ap_const_lv1_0;

    m_axi_mem1_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op124_readreq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op124_readreq_state3 = ap_const_boolean_1))) then 
            m_axi_mem1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem1_AWADDR <= ap_const_lv64_0;
    m_axi_mem1_AWBURST <= ap_const_lv2_0;
    m_axi_mem1_AWCACHE <= ap_const_lv4_0;
    m_axi_mem1_AWID <= ap_const_lv1_0;
    m_axi_mem1_AWLEN <= ap_const_lv32_0;
    m_axi_mem1_AWLOCK <= ap_const_lv2_0;
    m_axi_mem1_AWPROT <= ap_const_lv3_0;
    m_axi_mem1_AWQOS <= ap_const_lv4_0;
    m_axi_mem1_AWREGION <= ap_const_lv4_0;
    m_axi_mem1_AWSIZE <= ap_const_lv3_0;
    m_axi_mem1_AWUSER <= ap_const_lv1_0;
    m_axi_mem1_AWVALID <= ap_const_logic_0;
    m_axi_mem1_BREADY <= ap_const_logic_0;

    m_axi_mem1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_mem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem1_WDATA <= ap_const_lv32_0;
    m_axi_mem1_WID <= ap_const_lv1_0;
    m_axi_mem1_WLAST <= ap_const_logic_0;
    m_axi_mem1_WSTRB <= ap_const_lv4_0;
    m_axi_mem1_WUSER <= ap_const_lv1_0;
    m_axi_mem1_WVALID <= ap_const_logic_0;

    mem1_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_mem1_ARREADY, ap_predicate_op124_readreq_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op124_readreq_state3 = ap_const_boolean_1))) then 
            mem1_blk_n_AR <= m_axi_mem1_ARREADY;
        else 
            mem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_mem1_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem1_blk_n_R <= m_axi_mem1_RVALID;
        else 
            mem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    or_ln148_1_fu_428_p2 <= (icmp_ln149_fu_397_p2 or first_iter_9397_fu_422_p2);
    or_ln148_fu_416_p2 <= (icmp_ln149_fu_397_p2 or first_iter_10394_fu_410_p2);
    or_ln149_1_fu_504_p2 <= (or_ln148_1_fu_428_p2 or and_ln148_1_fu_452_p2);
    or_ln149_2_fu_516_p2 <= (xor_ln149_fu_510_p2 or icmp_ln149_fu_397_p2);
    or_ln149_fu_476_p2 <= (icmp_ln149_fu_397_p2 or and_ln148_1_fu_452_p2);
    p_cast46_cast_fu_312_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_cast46),64));
    p_cast51_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_59_fu_629_p2),64));
    p_cast_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_53_reg_881_pp0_iter10_reg),64));
    p_shl17_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_617_p3),47));
    p_shl_fu_613_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_605_p3),47));
    select_ln148_1_fu_458_p3 <= 
        add_ln148_fu_391_p2 when (icmp_ln149_fu_397_p2(0) = '1') else 
        oc2_fu_140;
    select_ln148_fu_402_p3 <= 
        ap_const_lv31_0 when (icmp_ln149_fu_397_p2(0) = '1') else 
        ic2_fu_132;
    select_ln149_1_fu_496_p3 <= 
        first_iter_10_mid1_fu_490_p2 when (and_ln148_1_fu_452_p2(0) = '1') else 
        or_ln148_fu_416_p2;
    select_ln149_2_fu_534_p3 <= 
        add_ln149_fu_470_p2 when (and_ln148_1_fu_452_p2(0) = '1') else 
        select_ln148_fu_402_p3;
    select_ln149_3_fu_713_p3 <= 
        ap_const_lv36_1 when (icmp_ln149_fu_397_p2(0) = '1') else 
        add_ln149_1_fu_707_p2;
    select_ln149_fu_482_p3 <= 
        ap_const_lv2_0 when (or_ln149_fu_476_p2(0) = '1') else 
        kr_fu_124;
    select_ln150_1_fu_699_p3 <= 
        ap_const_lv4_1 when (or_ln149_fu_476_p2(0) = '1') else 
        add_ln150_1_fu_693_p2;
    select_ln150_fu_582_p3 <= 
        add_ln150_fu_542_p2 when (and_ln149_fu_528_p2(0) = '1') else 
        select_ln149_fu_482_p3;
        sext_ln149_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln3_fu_649_p4),64));

    tmp6_fu_639_p2 <= std_logic_vector(unsigned(p_cast51_fu_635_p1) + unsigned(weight));
    tmp_46_fu_617_p3 <= (empty_58_fu_600_p2 & ap_const_lv10_0);
    tmp_fu_605_p3 <= (empty_58_fu_600_p2 & ap_const_lv13_0);
    tmp_s_fu_669_p3 <= (trunc_ln149_fu_466_p1 & ap_const_lv6_0);
    trunc_ln149_fu_466_p1 <= select_ln148_1_fu_458_p3(6 - 1 downto 0);
    trunc_ln3_fu_649_p4 <= empty_60_fu_644_p2(63 downto 2);
    xor_ln148_fu_434_p2 <= (icmp_ln149_fu_397_p2 xor ap_const_lv1_1);
    xor_ln149_fu_510_p2 <= (icmp_ln150_fu_446_p2 xor ap_const_lv1_1);
    zext_ln102_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln102),33));
    zext_ln148_1_fu_596_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln148_1_fu_458_p3),33));
    zext_ln148_cast_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln148),64));
end behav;
