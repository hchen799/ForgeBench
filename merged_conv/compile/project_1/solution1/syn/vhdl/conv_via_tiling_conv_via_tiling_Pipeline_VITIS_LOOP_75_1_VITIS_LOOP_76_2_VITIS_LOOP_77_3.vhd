-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_75_1_VITIS_LOOP_76_2_VITIS_LOOP_77_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_mem2_AWVALID : OUT STD_LOGIC;
    m_axi_mem2_AWREADY : IN STD_LOGIC;
    m_axi_mem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WVALID : OUT STD_LOGIC;
    m_axi_mem2_WREADY : IN STD_LOGIC;
    m_axi_mem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_WLAST : OUT STD_LOGIC;
    m_axi_mem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARVALID : OUT STD_LOGIC;
    m_axi_mem2_ARREADY : IN STD_LOGIC;
    m_axi_mem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RVALID : IN STD_LOGIC;
    m_axi_mem2_RREADY : OUT STD_LOGIC;
    m_axi_mem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem2_RLAST : IN STD_LOGIC;
    m_axi_mem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BVALID : IN STD_LOGIC;
    m_axi_mem2_BREADY : OUT STD_LOGIC;
    m_axi_mem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_AWVALID : OUT STD_LOGIC;
    m_axi_mem1_AWREADY : IN STD_LOGIC;
    m_axi_mem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_WVALID : OUT STD_LOGIC;
    m_axi_mem1_WREADY : IN STD_LOGIC;
    m_axi_mem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_WLAST : OUT STD_LOGIC;
    m_axi_mem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_ARVALID : OUT STD_LOGIC;
    m_axi_mem1_ARREADY : IN STD_LOGIC;
    m_axi_mem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_mem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_mem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_mem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RVALID : IN STD_LOGIC;
    m_axi_mem1_RREADY : OUT STD_LOGIC;
    m_axi_mem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_mem1_RLAST : IN STD_LOGIC;
    m_axi_mem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_mem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_BVALID : IN STD_LOGIC;
    m_axi_mem1_BREADY : OUT STD_LOGIC;
    m_axi_mem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_mem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_mem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    out_w : IN STD_LOGIC_VECTOR (31 downto 0);
    mul_ln45_1 : IN STD_LOGIC_VECTOR (95 downto 0);
    out_h : IN STD_LOGIC_VECTOR (31 downto 0);
    zext_ln75_1 : IN STD_LOGIC_VECTOR (62 downto 0);
    mul_ln45 : IN STD_LOGIC_VECTOR (63 downto 0);
    output_r : IN STD_LOGIC_VECTOR (63 downto 0);
    cmp764 : IN STD_LOGIC_VECTOR (0 downto 0);
    bias : IN STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_75_1_VITIS_LOOP_76_2_VITIS_LOOP_77_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv96_0 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv96_1 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln76_reg_636 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_reg_640 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op103_writereq_state3 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal or_ln76_reg_636_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal icmp_ln77_1_reg_650 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op124_writeresp_state17 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln75_fu_262_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mem2_blk_n_B : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal mem2_blk_n_W : STD_LOGIC;
    signal mem2_blk_n_AW : STD_LOGIC;
    signal mem1_blk_n_AR : STD_LOGIC;
    signal mem1_blk_n_R : STD_LOGIC;
    signal first_iter_0_reg_203 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal zext_ln75_1_cast_fu_215_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln75_1_cast_reg_622 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln75_reg_627 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln76_mid2_v_reg_631 : STD_LOGIC_VECTOR (61 downto 0);
    signal or_ln76_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln76_reg_636_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln76_fu_382_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mem1_addr_reg_644 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln77_1_fu_461_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_1_reg_650_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_fu_476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln76_1_reg_654_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_phi_mux_first_iter_0_phi_fu_207_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal p_cast_cast_fu_425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln75_fu_520_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ow_fu_100 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln77_1_fu_449_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal oh_fu_104 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln76_1_fu_390_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten_fu_108 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal select_ln76_2_fu_487_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal oc_fu_112 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    signal select_ln75_1_fu_304_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal indvar_flatten33_fu_116 : STD_LOGIC_VECTOR (95 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal add_ln75_2_fu_267_p2 : STD_LOGIC_VECTOR (95 downto 0);
    signal mem1_load1_fu_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal zext_ln77_fu_253_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln76_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln75_fu_279_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_mid2_v_v_v_v_v_fu_312_p3 : STD_LOGIC_VECTOR (40 downto 0);
    signal zext_ln75_fu_320_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln75_1_fu_324_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal first_iter_1315_fu_339_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln77_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln75_fu_290_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln75_2_fu_351_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln75_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln76_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln76_fu_358_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal or_ln75_1_fu_345_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_1_mid1_fu_376_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_398_p3 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_cast37_fu_406_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal empty_41_fu_410_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_415_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln77_fu_435_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal select_ln77_fu_441_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln77_1_fu_457_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_1_fu_466_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln76_fu_472_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_2_fu_481_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter6_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter7_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter8_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter9_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter10_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter11_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter12_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter13_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter14_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter15_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_via_tiling_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv_via_tiling_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    first_iter_0_reg_203_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_reg_627 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                first_iter_0_reg_203 <= ap_const_lv1_0;
            elsif (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_0_reg_203 <= ap_const_lv1_1;
            end if; 
        end if;
    end process;

    indvar_flatten33_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten33_fu_116 <= ap_const_lv96_0;
                elsif (((icmp_ln75_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten33_fu_116 <= add_ln75_2_fu_267_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_108 <= ap_const_lv64_0;
                elsif (((icmp_ln75_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_108 <= select_ln76_2_fu_487_p3;
                end if;
            end if; 
        end if;
    end process;

    oc_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    oc_fu_112 <= ap_const_lv31_0;
                elsif (((icmp_ln75_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    oc_fu_112 <= select_ln75_1_fu_304_p3;
                end if;
            end if; 
        end if;
    end process;

    oh_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    oh_fu_104 <= ap_const_lv31_0;
                elsif (((icmp_ln75_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    oh_fu_104 <= select_ln76_1_fu_390_p3;
                end if;
            end if; 
        end if;
    end process;

    ow_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    ow_fu_100 <= ap_const_lv31_0;
                elsif (((icmp_ln75_fu_262_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    ow_fu_100 <= select_ln77_1_fu_449_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter10_reg <= ap_loop_exit_ready_pp0_iter9_reg;
                ap_loop_exit_ready_pp0_iter11_reg <= ap_loop_exit_ready_pp0_iter10_reg;
                ap_loop_exit_ready_pp0_iter12_reg <= ap_loop_exit_ready_pp0_iter11_reg;
                ap_loop_exit_ready_pp0_iter13_reg <= ap_loop_exit_ready_pp0_iter12_reg;
                ap_loop_exit_ready_pp0_iter14_reg <= ap_loop_exit_ready_pp0_iter13_reg;
                ap_loop_exit_ready_pp0_iter15_reg <= ap_loop_exit_ready_pp0_iter14_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
                ap_loop_exit_ready_pp0_iter6_reg <= ap_loop_exit_ready_pp0_iter5_reg;
                ap_loop_exit_ready_pp0_iter7_reg <= ap_loop_exit_ready_pp0_iter6_reg;
                ap_loop_exit_ready_pp0_iter8_reg <= ap_loop_exit_ready_pp0_iter7_reg;
                ap_loop_exit_ready_pp0_iter9_reg <= ap_loop_exit_ready_pp0_iter8_reg;
                icmp_ln76_1_reg_654_pp0_iter10_reg <= icmp_ln76_1_reg_654_pp0_iter9_reg;
                icmp_ln76_1_reg_654_pp0_iter11_reg <= icmp_ln76_1_reg_654_pp0_iter10_reg;
                icmp_ln76_1_reg_654_pp0_iter12_reg <= icmp_ln76_1_reg_654_pp0_iter11_reg;
                icmp_ln76_1_reg_654_pp0_iter13_reg <= icmp_ln76_1_reg_654_pp0_iter12_reg;
                icmp_ln76_1_reg_654_pp0_iter14_reg <= icmp_ln76_1_reg_654_pp0_iter13_reg;
                icmp_ln76_1_reg_654_pp0_iter15_reg <= icmp_ln76_1_reg_654_pp0_iter14_reg;
                icmp_ln76_1_reg_654_pp0_iter2_reg <= icmp_ln76_1_reg_654;
                icmp_ln76_1_reg_654_pp0_iter3_reg <= icmp_ln76_1_reg_654_pp0_iter2_reg;
                icmp_ln76_1_reg_654_pp0_iter4_reg <= icmp_ln76_1_reg_654_pp0_iter3_reg;
                icmp_ln76_1_reg_654_pp0_iter5_reg <= icmp_ln76_1_reg_654_pp0_iter4_reg;
                icmp_ln76_1_reg_654_pp0_iter6_reg <= icmp_ln76_1_reg_654_pp0_iter5_reg;
                icmp_ln76_1_reg_654_pp0_iter7_reg <= icmp_ln76_1_reg_654_pp0_iter6_reg;
                icmp_ln76_1_reg_654_pp0_iter8_reg <= icmp_ln76_1_reg_654_pp0_iter7_reg;
                icmp_ln76_1_reg_654_pp0_iter9_reg <= icmp_ln76_1_reg_654_pp0_iter8_reg;
                icmp_ln77_1_reg_650_pp0_iter10_reg <= icmp_ln77_1_reg_650_pp0_iter9_reg;
                icmp_ln77_1_reg_650_pp0_iter11_reg <= icmp_ln77_1_reg_650_pp0_iter10_reg;
                icmp_ln77_1_reg_650_pp0_iter12_reg <= icmp_ln77_1_reg_650_pp0_iter11_reg;
                icmp_ln77_1_reg_650_pp0_iter13_reg <= icmp_ln77_1_reg_650_pp0_iter12_reg;
                icmp_ln77_1_reg_650_pp0_iter14_reg <= icmp_ln77_1_reg_650_pp0_iter13_reg;
                icmp_ln77_1_reg_650_pp0_iter15_reg <= icmp_ln77_1_reg_650_pp0_iter14_reg;
                icmp_ln77_1_reg_650_pp0_iter2_reg <= icmp_ln77_1_reg_650;
                icmp_ln77_1_reg_650_pp0_iter3_reg <= icmp_ln77_1_reg_650_pp0_iter2_reg;
                icmp_ln77_1_reg_650_pp0_iter4_reg <= icmp_ln77_1_reg_650_pp0_iter3_reg;
                icmp_ln77_1_reg_650_pp0_iter5_reg <= icmp_ln77_1_reg_650_pp0_iter4_reg;
                icmp_ln77_1_reg_650_pp0_iter6_reg <= icmp_ln77_1_reg_650_pp0_iter5_reg;
                icmp_ln77_1_reg_650_pp0_iter7_reg <= icmp_ln77_1_reg_650_pp0_iter6_reg;
                icmp_ln77_1_reg_650_pp0_iter8_reg <= icmp_ln77_1_reg_650_pp0_iter7_reg;
                icmp_ln77_1_reg_650_pp0_iter9_reg <= icmp_ln77_1_reg_650_pp0_iter8_reg;
                or_ln76_reg_636_pp0_iter2_reg <= or_ln76_reg_636;
                or_ln76_reg_636_pp0_iter3_reg <= or_ln76_reg_636_pp0_iter2_reg;
                or_ln76_reg_636_pp0_iter4_reg <= or_ln76_reg_636_pp0_iter3_reg;
                or_ln76_reg_636_pp0_iter5_reg <= or_ln76_reg_636_pp0_iter4_reg;
                or_ln76_reg_636_pp0_iter6_reg <= or_ln76_reg_636_pp0_iter5_reg;
                or_ln76_reg_636_pp0_iter7_reg <= or_ln76_reg_636_pp0_iter6_reg;
                or_ln76_reg_636_pp0_iter8_reg <= or_ln76_reg_636_pp0_iter7_reg;
                or_ln76_reg_636_pp0_iter9_reg <= or_ln76_reg_636_pp0_iter8_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                icmp_ln75_reg_627 <= icmp_ln75_fu_262_p2;
                icmp_ln76_1_reg_654 <= icmp_ln76_1_fu_476_p2;
                icmp_ln77_1_reg_650 <= icmp_ln77_1_fu_461_p2;
                mem1_addr_reg_644 <= p_cast_cast_fu_425_p1;
                or_ln76_reg_636 <= or_ln76_fu_370_p2;
                select_ln76_reg_640 <= select_ln76_fu_382_p3;
                sext_ln76_mid2_v_reg_631 <= add_ln75_1_fu_324_p2(63 downto 2);
                    zext_ln75_1_cast_reg_622(62 downto 0) <= zext_ln75_1_cast_fu_215_p1(62 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln76_reg_636_pp0_iter9_reg = ap_const_lv1_1))) then
                mem1_load1_fu_120 <= m_axi_mem1_RDATA;
            end if;
        end if;
    end process;
    zext_ln75_1_cast_reg_622(63) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln75_1_fu_324_p2 <= std_logic_vector(unsigned(zext_ln75_fu_320_p1) + unsigned(output_r));
    add_ln75_2_fu_267_p2 <= std_logic_vector(unsigned(indvar_flatten33_fu_116) + unsigned(ap_const_lv96_1));
    add_ln75_fu_279_p2 <= std_logic_vector(unsigned(oc_fu_112) + unsigned(ap_const_lv31_1));
    add_ln76_1_fu_466_p2 <= std_logic_vector(unsigned(select_ln76_1_fu_390_p3) + unsigned(ap_const_lv31_1));
    add_ln76_2_fu_481_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_108) + unsigned(ap_const_lv64_1));
    add_ln76_fu_358_p2 <= std_logic_vector(unsigned(select_ln75_fu_290_p3) + unsigned(ap_const_lv31_1));
    add_ln77_fu_435_p2 <= std_logic_vector(unsigned(ow_fu_100) + unsigned(ap_const_lv31_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter16, ap_block_state11_pp0_stage0_iter10, ap_block_state17_pp0_stage0_iter16)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter16)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter16, m_axi_mem2_WREADY, ap_block_state3_io, ap_block_state11_pp0_stage0_iter10, ap_block_state17_pp0_stage0_iter16)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter16)) or ((m_axi_mem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter16, m_axi_mem2_WREADY, ap_block_state3_io, ap_block_state11_pp0_stage0_iter10, ap_block_state17_pp0_stage0_iter16)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter16)) or ((m_axi_mem2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_io)));
    end process;


    ap_block_state11_pp0_stage0_iter10_assign_proc : process(m_axi_mem1_RVALID, or_ln76_reg_636_pp0_iter9_reg)
    begin
                ap_block_state11_pp0_stage0_iter10 <= ((or_ln76_reg_636_pp0_iter9_reg = ap_const_lv1_1) and (m_axi_mem1_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_pp0_stage0_iter16_assign_proc : process(m_axi_mem2_BVALID, ap_predicate_op124_writeresp_state17)
    begin
                ap_block_state17_pp0_stage0_iter16 <= ((ap_predicate_op124_writeresp_state17 = ap_const_boolean_1) and (m_axi_mem2_BVALID = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axi_mem2_AWREADY, m_axi_mem1_ARREADY, or_ln76_reg_636, ap_predicate_op103_writereq_state3)
    begin
                ap_block_state3_io <= (((or_ln76_reg_636 = ap_const_lv1_1) and (m_axi_mem1_ARREADY = ap_const_logic_0)) or ((m_axi_mem2_AWREADY = ap_const_logic_0) and (ap_predicate_op103_writereq_state3 = ap_const_boolean_1)));
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln75_fu_262_p2)
    begin
        if (((icmp_ln75_fu_262_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter15_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter15_reg = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_phi_mux_first_iter_0_phi_fu_207_p4_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0, first_iter_0_reg_203, icmp_ln75_reg_627)
    begin
        if (((icmp_ln75_reg_627 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_first_iter_0_phi_fu_207_p4 <= ap_const_lv1_0;
        else 
            ap_phi_mux_first_iter_0_phi_fu_207_p4 <= first_iter_0_reg_203;
        end if; 
    end process;


    ap_predicate_op103_writereq_state3_assign_proc : process(or_ln76_reg_636, select_ln76_reg_640)
    begin
                ap_predicate_op103_writereq_state3 <= ((select_ln76_reg_640 = ap_const_lv1_1) and (or_ln76_reg_636 = ap_const_lv1_1));
    end process;


    ap_predicate_op124_writeresp_state17_assign_proc : process(icmp_ln77_1_reg_650_pp0_iter15_reg, icmp_ln76_1_reg_654_pp0_iter15_reg)
    begin
                ap_predicate_op124_writeresp_state17 <= ((icmp_ln76_1_reg_654_pp0_iter15_reg = ap_const_lv1_0) and (icmp_ln77_1_reg_650_pp0_iter15_reg = ap_const_lv1_0));
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    empty_41_fu_410_p2 <= std_logic_vector(unsigned(p_cast37_fu_406_p1) + unsigned(bias));
    first_iter_1315_fu_339_p2 <= "1" when (oh_fu_104 = ap_const_lv31_0) else "0";
    first_iter_1_mid1_fu_376_p2 <= "1" when (add_ln76_fu_358_p2 = ap_const_lv31_0) else "0";
    icmp_ln75_fu_262_p2 <= "1" when (indvar_flatten33_fu_116 = mul_ln45_1) else "0";
    icmp_ln76_1_fu_476_p2 <= "1" when (signed(zext_ln76_fu_472_p1) < signed(out_h)) else "0";
    icmp_ln76_fu_285_p2 <= "1" when (indvar_flatten_fu_108 = mul_ln45) else "0";
    icmp_ln77_1_fu_461_p2 <= "1" when (signed(zext_ln77_1_fu_457_p1) < signed(out_w)) else "0";
    icmp_ln77_fu_257_p2 <= "1" when (signed(zext_ln77_fu_253_p1) < signed(out_w)) else "0";
    m_axi_mem1_ARADDR <= mem1_addr_reg_644;
    m_axi_mem1_ARBURST <= ap_const_lv2_0;
    m_axi_mem1_ARCACHE <= ap_const_lv4_0;
    m_axi_mem1_ARID <= ap_const_lv1_0;
    m_axi_mem1_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);
    m_axi_mem1_ARLOCK <= ap_const_lv2_0;
    m_axi_mem1_ARPROT <= ap_const_lv3_0;
    m_axi_mem1_ARQOS <= ap_const_lv4_0;
    m_axi_mem1_ARREGION <= ap_const_lv4_0;
    m_axi_mem1_ARSIZE <= ap_const_lv3_0;
    m_axi_mem1_ARUSER <= ap_const_lv1_0;

    m_axi_mem1_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter2, or_ln76_reg_636, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln76_reg_636 = ap_const_lv1_1))) then 
            m_axi_mem1_ARVALID <= ap_const_logic_1;
        else 
            m_axi_mem1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem1_AWADDR <= ap_const_lv64_0;
    m_axi_mem1_AWBURST <= ap_const_lv2_0;
    m_axi_mem1_AWCACHE <= ap_const_lv4_0;
    m_axi_mem1_AWID <= ap_const_lv1_0;
    m_axi_mem1_AWLEN <= ap_const_lv32_0;
    m_axi_mem1_AWLOCK <= ap_const_lv2_0;
    m_axi_mem1_AWPROT <= ap_const_lv3_0;
    m_axi_mem1_AWQOS <= ap_const_lv4_0;
    m_axi_mem1_AWREGION <= ap_const_lv4_0;
    m_axi_mem1_AWSIZE <= ap_const_lv3_0;
    m_axi_mem1_AWUSER <= ap_const_lv1_0;
    m_axi_mem1_AWVALID <= ap_const_logic_0;
    m_axi_mem1_BREADY <= ap_const_logic_0;

    m_axi_mem1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter10, or_ln76_reg_636_pp0_iter9_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln76_reg_636_pp0_iter9_reg = ap_const_lv1_1))) then 
            m_axi_mem1_RREADY <= ap_const_logic_1;
        else 
            m_axi_mem1_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem1_WDATA <= ap_const_lv32_0;
    m_axi_mem1_WID <= ap_const_lv1_0;
    m_axi_mem1_WLAST <= ap_const_logic_0;
    m_axi_mem1_WSTRB <= ap_const_lv4_0;
    m_axi_mem1_WUSER <= ap_const_lv1_0;
    m_axi_mem1_WVALID <= ap_const_logic_0;
    m_axi_mem2_ARADDR <= ap_const_lv64_0;
    m_axi_mem2_ARBURST <= ap_const_lv2_0;
    m_axi_mem2_ARCACHE <= ap_const_lv4_0;
    m_axi_mem2_ARID <= ap_const_lv1_0;
    m_axi_mem2_ARLEN <= ap_const_lv32_0;
    m_axi_mem2_ARLOCK <= ap_const_lv2_0;
    m_axi_mem2_ARPROT <= ap_const_lv3_0;
    m_axi_mem2_ARQOS <= ap_const_lv4_0;
    m_axi_mem2_ARREGION <= ap_const_lv4_0;
    m_axi_mem2_ARSIZE <= ap_const_lv3_0;
    m_axi_mem2_ARUSER <= ap_const_lv1_0;
    m_axi_mem2_ARVALID <= ap_const_logic_0;
    m_axi_mem2_AWADDR <= sext_ln75_fu_520_p1;
    m_axi_mem2_AWBURST <= ap_const_lv2_0;
    m_axi_mem2_AWCACHE <= ap_const_lv4_0;
    m_axi_mem2_AWID <= ap_const_lv1_0;
    m_axi_mem2_AWLEN <= zext_ln75_1_cast_reg_622(32 - 1 downto 0);
    m_axi_mem2_AWLOCK <= ap_const_lv2_0;
    m_axi_mem2_AWPROT <= ap_const_lv3_0;
    m_axi_mem2_AWQOS <= ap_const_lv4_0;
    m_axi_mem2_AWREGION <= ap_const_lv4_0;
    m_axi_mem2_AWSIZE <= ap_const_lv3_0;
    m_axi_mem2_AWUSER <= ap_const_lv1_0;

    m_axi_mem2_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter2, ap_predicate_op103_writereq_state3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op103_writereq_state3 = ap_const_boolean_1))) then 
            m_axi_mem2_AWVALID <= ap_const_logic_1;
        else 
            m_axi_mem2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    m_axi_mem2_BREADY_assign_proc : process(ap_enable_reg_pp0_iter16, ap_predicate_op124_writeresp_state17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_predicate_op124_writeresp_state17 = ap_const_boolean_1))) then 
            m_axi_mem2_BREADY <= ap_const_logic_1;
        else 
            m_axi_mem2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_mem2_RREADY <= ap_const_logic_0;
    m_axi_mem2_WDATA <= mem1_load1_fu_120;
    m_axi_mem2_WID <= ap_const_lv1_0;
    m_axi_mem2_WLAST <= ap_const_logic_0;
    m_axi_mem2_WSTRB <= ap_const_lv4_F;
    m_axi_mem2_WUSER <= ap_const_lv1_0;

    m_axi_mem2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter11, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            m_axi_mem2_WVALID <= ap_const_logic_1;
        else 
            m_axi_mem2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    mem1_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_mem1_ARREADY, or_ln76_reg_636, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln76_reg_636 = ap_const_lv1_1))) then 
            mem1_blk_n_AR <= m_axi_mem1_ARREADY;
        else 
            mem1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    mem1_blk_n_R_assign_proc : process(ap_enable_reg_pp0_iter10, m_axi_mem1_RVALID, or_ln76_reg_636_pp0_iter9_reg, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln76_reg_636_pp0_iter9_reg = ap_const_lv1_1))) then 
            mem1_blk_n_R <= m_axi_mem1_RVALID;
        else 
            mem1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter2, m_axi_mem2_AWREADY, ap_predicate_op103_writereq_state3, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op103_writereq_state3 = ap_const_boolean_1))) then 
            mem2_blk_n_AW <= m_axi_mem2_AWREADY;
        else 
            mem2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter16, m_axi_mem2_BVALID, ap_predicate_op124_writeresp_state17, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_predicate_op124_writeresp_state17 = ap_const_boolean_1))) then 
            mem2_blk_n_B <= m_axi_mem2_BVALID;
        else 
            mem2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    mem2_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter11, m_axi_mem2_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter11 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mem2_blk_n_W <= m_axi_mem2_WREADY;
        else 
            mem2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    or_ln75_1_fu_345_p2 <= (icmp_ln76_fu_285_p2 or first_iter_1315_fu_339_p2);
    or_ln75_fu_298_p2 <= (icmp_ln76_fu_285_p2 or ap_phi_mux_first_iter_0_phi_fu_207_p4);
    or_ln76_fu_370_p2 <= (xor_ln76_fu_364_p2 or or_ln75_fu_298_p2);
    p_cast37_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_398_p3),64));
        p_cast_cast_fu_425_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_415_p4),64));

    p_cast_fu_415_p4 <= empty_41_fu_410_p2(63 downto 2);
    select_ln75_1_fu_304_p3 <= 
        add_ln75_fu_279_p2 when (icmp_ln76_fu_285_p2(0) = '1') else 
        oc_fu_112;
    select_ln75_2_fu_351_p3 <= 
        cmp764 when (icmp_ln76_fu_285_p2(0) = '1') else 
        icmp_ln77_fu_257_p2;
    select_ln75_fu_290_p3 <= 
        ap_const_lv31_0 when (icmp_ln76_fu_285_p2(0) = '1') else 
        oh_fu_104;
    select_ln76_1_fu_390_p3 <= 
        select_ln75_fu_290_p3 when (select_ln75_2_fu_351_p3(0) = '1') else 
        add_ln76_fu_358_p2;
    select_ln76_2_fu_487_p3 <= 
        ap_const_lv64_1 when (icmp_ln76_fu_285_p2(0) = '1') else 
        add_ln76_2_fu_481_p2;
    select_ln76_fu_382_p3 <= 
        or_ln75_1_fu_345_p2 when (select_ln75_2_fu_351_p3(0) = '1') else 
        first_iter_1_mid1_fu_376_p2;
    select_ln77_1_fu_449_p3 <= 
        select_ln77_fu_441_p3 when (select_ln75_2_fu_351_p3(0) = '1') else 
        ap_const_lv31_1;
    select_ln77_fu_441_p3 <= 
        ap_const_lv31_1 when (icmp_ln76_fu_285_p2(0) = '1') else 
        add_ln77_fu_435_p2;
        sext_ln75_fu_520_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln76_mid2_v_reg_631),64));

    sext_ln76_mid2_v_v_v_v_v_fu_312_p3 <= (select_ln75_1_fu_304_p3 & ap_const_lv10_0);
    tmp_s_fu_398_p3 <= (select_ln75_1_fu_304_p3 & ap_const_lv2_0);
    xor_ln76_fu_364_p2 <= (select_ln75_2_fu_351_p3 xor ap_const_lv1_1);
    zext_ln75_1_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln75_1),64));
    zext_ln75_fu_320_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln76_mid2_v_v_v_v_v_fu_312_p3),64));
    zext_ln76_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_1_fu_466_p2),32));
    zext_ln77_1_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln77_1_fu_449_p3),32));
    zext_ln77_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow_fu_100),32));
end behav;
