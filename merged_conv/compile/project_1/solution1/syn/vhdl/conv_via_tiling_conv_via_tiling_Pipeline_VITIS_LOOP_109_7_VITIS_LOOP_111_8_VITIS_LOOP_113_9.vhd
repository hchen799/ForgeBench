-- ==============================================================
-- Generated by Vitis HLS v2024.1.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_109_7_VITIS_LOOP_111_8_VITIS_LOOP_113_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    localOut_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    localOut_ce0 : OUT STD_LOGIC;
    localOut_we0 : OUT STD_LOGIC;
    localOut_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv_via_tiling_conv_via_tiling_Pipeline_VITIS_LOOP_109_7_VITIS_LOOP_111_8_VITIS_LOOP_113_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_C40 : STD_LOGIC_VECTOR (11 downto 0) := "110001000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln109_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal zext_ln115_4_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal block_out_w_i_fu_52 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln113_fu_277_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_block_out_w_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal block_out_h_i_fu_56 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln111_fu_204_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_allocacmp_block_out_h_i_load : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten40_fu_60 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln111_1_fu_289_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_allocacmp_indvar_flatten40_load : STD_LOGIC_VECTOR (5 downto 0);
    signal block_out_ch_i_fu_64 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    signal select_ln109_1_fu_176_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_sig_allocacmp_block_out_ch_i_load : STD_LOGIC_VECTOR (6 downto 0);
    signal indvar_flatten53_fu_68 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal add_ln109_1_fu_120_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_sig_allocacmp_indvar_flatten53_load : STD_LOGIC_VECTOR (11 downto 0);
    signal localOut_we0_local : STD_LOGIC;
    signal localOut_ce0_local : STD_LOGIC;
    signal icmp_ln111_fu_144_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln113_fu_164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln109_fu_158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln109_fu_138_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln109_fu_150_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln109_fu_170_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_fu_190_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln111_fu_184_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_shl7_fu_216_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln115_fu_212_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sub_ln115_fu_224_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln115_1_fu_230_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln115_fu_234_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln115_fu_240_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_fu_244_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln115_2_fu_252_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal block_out_w_i_mid2_fu_196_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal sub_ln113_fu_256_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln115_3_fu_262_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln115_1_fu_266_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln111_1_fu_283_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component conv_via_tiling_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component conv_via_tiling_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    block_out_ch_i_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln109_fu_114_p2 = ap_const_lv1_0)) then 
                    block_out_ch_i_fu_64 <= select_ln109_1_fu_176_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    block_out_ch_i_fu_64 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;

    block_out_h_i_fu_56_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln109_fu_114_p2 = ap_const_lv1_0)) then 
                    block_out_h_i_fu_56 <= select_ln111_fu_204_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    block_out_h_i_fu_56 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    block_out_w_i_fu_52_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln109_fu_114_p2 = ap_const_lv1_0)) then 
                    block_out_w_i_fu_52 <= add_ln113_fu_277_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    block_out_w_i_fu_52 <= ap_const_lv3_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten40_fu_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln109_fu_114_p2 = ap_const_lv1_0)) then 
                    indvar_flatten40_fu_60 <= select_ln111_1_fu_289_p3;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten40_fu_60 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten53_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                if ((icmp_ln109_fu_114_p2 = ap_const_lv1_0)) then 
                    indvar_flatten53_fu_68 <= add_ln109_1_fu_120_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten53_fu_68 <= ap_const_lv12_0;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln109_1_fu_120_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten53_load) + unsigned(ap_const_lv12_1));
    add_ln109_fu_138_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_block_out_ch_i_load) + unsigned(ap_const_lv7_1));
    add_ln111_1_fu_283_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten40_load) + unsigned(ap_const_lv6_1));
    add_ln111_fu_184_p2 <= std_logic_vector(unsigned(select_ln109_fu_150_p3) + unsigned(ap_const_lv3_1));
    add_ln113_fu_277_p2 <= std_logic_vector(unsigned(block_out_w_i_mid2_fu_196_p3) + unsigned(ap_const_lv3_1));
    add_ln115_1_fu_266_p2 <= std_logic_vector(unsigned(sub_ln113_fu_256_p2) + unsigned(zext_ln115_3_fu_262_p1));
    add_ln115_fu_234_p2 <= std_logic_vector(unsigned(sub_ln115_fu_224_p2) + unsigned(zext_ln115_1_fu_230_p1));
    and_ln109_fu_170_p2 <= (xor_ln109_fu_158_p2 and icmp_ln113_fu_164_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_block_state1_pp0_stage0_iter0)
    begin
        if ((ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start_int = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln109_fu_114_p2)
    begin
        if (((icmp_ln109_fu_114_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_block_out_ch_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, block_out_ch_i_fu_64)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_block_out_ch_i_load <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_block_out_ch_i_load <= block_out_ch_i_fu_64;
        end if; 
    end process;


    ap_sig_allocacmp_block_out_h_i_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, block_out_h_i_fu_56)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_block_out_h_i_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_block_out_h_i_load <= block_out_h_i_fu_56;
        end if; 
    end process;


    ap_sig_allocacmp_block_out_w_i_load_assign_proc : process(ap_CS_fsm_state1, block_out_w_i_fu_52, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_block_out_w_i_load <= ap_const_lv3_0;
        else 
            ap_sig_allocacmp_block_out_w_i_load <= block_out_w_i_fu_52;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten40_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten40_fu_60)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten40_load <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_indvar_flatten40_load <= indvar_flatten40_fu_60;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten53_load_assign_proc : process(ap_CS_fsm_state1, ap_loop_init, indvar_flatten53_fu_68)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_indvar_flatten53_load <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_indvar_flatten53_load <= indvar_flatten53_fu_68;
        end if; 
    end process;

    block_out_w_i_mid2_fu_196_p3 <= 
        ap_const_lv3_0 when (empty_fu_190_p2(0) = '1') else 
        ap_sig_allocacmp_block_out_w_i_load;
    empty_fu_190_p2 <= (icmp_ln111_fu_144_p2 or and_ln109_fu_170_p2);
    icmp_ln109_fu_114_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten53_load = ap_const_lv12_C40) else "0";
    icmp_ln111_fu_144_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten40_load = ap_const_lv6_31) else "0";
    icmp_ln113_fu_164_p2 <= "1" when (ap_sig_allocacmp_block_out_w_i_load = ap_const_lv3_7) else "0";
    localOut_address0 <= zext_ln115_4_fu_272_p1(12 - 1 downto 0);
    localOut_ce0 <= localOut_ce0_local;

    localOut_ce0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            localOut_ce0_local <= ap_const_logic_1;
        else 
            localOut_ce0_local <= ap_const_logic_0;
        end if; 
    end process;

    localOut_d0 <= ap_const_lv32_0;
    localOut_we0 <= localOut_we0_local;

    localOut_we0_local_assign_proc : process(ap_CS_fsm_state1, ap_block_state1_pp0_stage0_iter0, icmp_ln109_fu_114_p2)
    begin
        if (((icmp_ln109_fu_114_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_state1_pp0_stage0_iter0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            localOut_we0_local <= ap_const_logic_1;
        else 
            localOut_we0_local <= ap_const_logic_0;
        end if; 
    end process;

    p_shl7_fu_216_p3 <= (select_ln109_1_fu_176_p3 & ap_const_lv3_0);
    select_ln109_1_fu_176_p3 <= 
        add_ln109_fu_138_p2 when (icmp_ln111_fu_144_p2(0) = '1') else 
        ap_sig_allocacmp_block_out_ch_i_load;
    select_ln109_fu_150_p3 <= 
        ap_const_lv3_0 when (icmp_ln111_fu_144_p2(0) = '1') else 
        ap_sig_allocacmp_block_out_h_i_load;
    select_ln111_1_fu_289_p3 <= 
        ap_const_lv6_1 when (icmp_ln111_fu_144_p2(0) = '1') else 
        add_ln111_1_fu_283_p2;
    select_ln111_fu_204_p3 <= 
        add_ln111_fu_184_p2 when (and_ln109_fu_170_p2(0) = '1') else 
        select_ln109_fu_150_p3;
    sub_ln113_fu_256_p2 <= std_logic_vector(unsigned(tmp_fu_244_p3) - unsigned(zext_ln115_2_fu_252_p1));
    sub_ln115_fu_224_p2 <= std_logic_vector(unsigned(p_shl7_fu_216_p3) - unsigned(zext_ln115_fu_212_p1));
    tmp_fu_244_p3 <= (trunc_ln115_fu_240_p1 & ap_const_lv3_0);
    trunc_ln115_fu_240_p1 <= add_ln115_fu_234_p2(9 - 1 downto 0);
    xor_ln109_fu_158_p2 <= (icmp_ln111_fu_144_p2 xor ap_const_lv1_1);
    zext_ln115_1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln111_fu_204_p3),10));
    zext_ln115_2_fu_252_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_fu_234_p2),12));
    zext_ln115_3_fu_262_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(block_out_w_i_mid2_fu_196_p3),12));
    zext_ln115_4_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln115_1_fu_266_p2),64));
    zext_ln115_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_1_fu_176_p3),10));
end behav;
